---
title: "Reshaping transforms"
format:
  html:
    css: styles.css
    reference-location: margin
---

![Image: *SAREC field day 2018* by Univ Wyoming Extension CT is licensed under [CC BY-NC-ND 2.0](https://creativecommons.org/licenses/by-nc-nd/2.0/)](figures/data-shaping-5.png)

```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(comment = "#>", 
                      collapse = TRUE, 
                      message = FALSE)
```

```{r}
#| echo: false
# prepare two data sets for display
library(data.table)
cohort <- fread("data/three_blocs.csv")
key_columns <- c("program", "peer_group") 
blocks <- cohort[, .N, by = key_columns]
blocks$peer_group <- factor(blocks$peer_group, levels = c("ever_enrolled", "starters", "graduates"))
setorderv(blocks, c("program", "peer_group"))

rowrecs <- dcast(blocks, 
                    program ~ peer_group, 
                    value.var = "N")
                    setkey(rowrecs, NULL)
setcolorder(rowrecs, c("program", "starters", "ever_enrolled", "graduates"))
```

Using **cdata**, **data.table**, and **dplyr/tidyr** to transform MIDFIELD data as needed for your analysis (no base R transforms in this section). 

In this section, we cover reshaping data frames by moving data between rows and columns, often called *pivoting*. 




## Terminology 

Pivoting operations go by a number of different names, as listed in Table 1 [@Mount+Zumel:2019:fluid-data].   

```{r}
#| echo: false
library(gt)
wrapr::build_frame(
  "System"               , 'Pivot "wider"'  , 'Pivot "longer"' |
    "colloquially called", '"tall to wide"' , '"wide to tall"' |
    "Microsoft Excel"    , "pivot"          , "un-pivot"       |
    "databases"          , "pivot"          , "anti-pivot"     |
    "databases"          , "crosstab"       , "shred"          |
    "R"                  , "unstack"        , "stack"          |
    "reshape, reshape2"  , "cast"           , "melt"           ) |>
  gt() |>
  # cols_width(
  #   starts_with("sys") ~ px(150),
  #   everything() ~ px(110)
  #   ) |>
  tab_caption("Table 1: Reshaping operations")|> 
  tab_options(table.font.size = "small") |>
  opt_stylize(style = 1, color = "gray")
```

<br>

Pivoting is possible in base R but the package versions in data.table,  tidyr, and cdata are significantly better tools. Table 2 lists the reshaping functions we use in this work. 

```{r}
#| echo: false
wrapr::build_frame(
  "R package" , 'Pivot "wider"'     , 'Pivot "longer"'       |
  "data.table", "dcast()"           , "melt()"               |
  "tidyr"     , "pivot_wider()"     , "pivot_longer()"       |     
  "cdata"     , "pivot_to_rowrecs()", "unpivot_to_blocks()") |>
  gt() |>
  # cols_width(
  #   starts_with("R") ~ px(95),
  #   everything() ~ px(135)
  #   ) |>
  tab_caption("Table 2: Reshaping functions we use") |>
  tab_options(table.font.size = "small") |>
  opt_stylize(style = 1, color = "gray")
```

<br>

The data set we use in this section is shown in Table 3, where "starters" is the number of students starting in an engineering program, "ever enrolled" is the number who were enrolled at least one term in the program, and "graduates" is the number graduating from that program. 

```{r}
#| classes: no-stripe
#| echo: false
rowrecs |>
  gt() |>
  # cols_width(
  #   starts_with("ever") ~ px(82),
  #   starts_with("grad") ~ px(70),
  #   everything() ~ px(60)
  #   ) |>
  tab_caption("Table 3. Row-records form") |>
  tab_options(table.font.size = "small") |>
  opt_stylize(style = 1, color = "gray")  |>
    tab_style(
    style = list(cell_fill(color = "#d8daeb")),
    locations = cells_column_labels(columns = program)
  ) |>
  tab_style(
    style = list(cell_fill(color = "#d9d9d9")),
    locations = cells_body(columns = program, rows = everything())
  ) |>
  tab_style(
    style = list(cell_fill(color = "#80cdc1")),
    locations = cells_column_labels(columns = starters)
  ) |>
  tab_style(
    style = list(cell_fill(color = "#c7eae5")),
    locations = cells_body(columns = starters, rows = everything())
  ) |>
  tab_style(
    style = list(cell_fill(color = "#dfc27d")),
    locations = cells_column_labels(columns = ever_enrolled)
  ) |>
  tab_style(
    style = list(cell_fill(color = "#f6e8c3")),
    locations = cells_body(columns = ever_enrolled, rows = everything())
  ) |>
  tab_style(
    style = list(cell_fill(color = "#c2a5cf")),
    locations = cells_column_labels(columns = graduates)
  ) |>
  tab_style(
    style = list(cell_fill(color = "#e7d4e8")),
    locations = cells_body(columns = graduates, rows = everything())
  )
```

<br>

These data are in "wide" format, with one row per program. In this form, the "coordinates" of a measurement (a count of students) are the value of the primary key (`program`) and a column name.^[We refer again to Mount & Zumel  (2019) for the concept of *coordinatized data*.]

In Table 4, these data are transformed to "tall" format, with three rows per program. As indicated by the cell color-coding,  the names of three columns in Table 3 are now values in the peer-group column in Table 4 and all counts of students are collected in the N column. In this form, the coordinates of a measurement (`N`) are given by the composite key (`program` + `peer_group`). 
 
```{r}
#| classes: no-stripe
#| echo: false

blocks$peer_group <- factor(blocks$peer_group, levels = c("starters", "ever_enrolled", "graduates"))
order_cols <- c("peer_group", "program")
setorderv(blocks, order_cols)
blocks |>
  gt() |>
  # cols_width(
  #   starts_with("pro") ~ px(90), 
  #   starts_with("peer") ~ px(90),
  #   everything() ~ px(50)
  #   ) |>
  tab_caption("Table 4. Blocks form") |>
  tab_options(table.font.size = "small") |>
  tab_style(style = cell_text(align = "left"),
            locations = cells_body(columns = peer_group)) |>
  tab_style(style = cell_text(align = "left"),
            locations = cells_column_labels(columns = peer_group)) |>
  opt_stylize(style = 1, color = "gray")  |>
  tab_style(
    style = list(cell_fill(color = "#d8daeb")),
    locations = cells_column_labels(columns = everything())
  ) |>
  tab_style(
    style = list(cell_fill(color = "#d9d9d9")),
    locations = cells_body(
      columns = program,
      rows = everything()
    )
  ) |> 
  tab_style(
    style = list(cell_fill(color = "#dfc27d")),
    locations = cells_body(
      columns = peer_group,
      rows = peer_group == "ever_enrolled"
    )
  )|>
  tab_style(
    style = list(cell_fill(color = "#f6e8c3")),
    locations = cells_body(
      columns = N,
      rows = peer_group == "ever_enrolled"
    )
  )|>
  tab_style(
    style = list(cell_fill(color = "#80cdc1")),
    locations = cells_body(
      columns = peer_group,
      rows = peer_group == "starters"
    )
  )|>
  tab_style(
    style = list(cell_fill(color = "#c7eae5")),
    locations = cells_body(
      columns = N,
      rows = peer_group == "starters"
    )
  )|>
  tab_style(
    style = list(cell_fill(color = "#c2a5cf")),
    locations = cells_body(
      columns = peer_group,
      rows = peer_group == "graduates"
    )
  )|>
  tab_style(
    style = list(cell_fill(color = "#e7d4e8")),
    locations = cells_body(
      columns = N,
      rows = peer_group == "graduates"
    )
  )  |>
  tab_style(
    style = list(
      cell_borders(
        sides = c("bottom"),
        color = "#969696",
        weight = px(2)
      )
    ),
    locations = list(
      cells_body(
        columns = everything(),
        rows = program == "Mechanical"
      )
    )
  )
```

<br>
 
You can see why "wide" and  "tall" are commonly used to describe these two formats.  Yet "wider" implies having more columns, and (while true here) that is not always the case. 

What *is* always true is that the first format comprises ***row records***, or one row per primary key, and the second format comprises ***blocks***, or multiple rows per primary key [@Mount+Zumel:2021:block+row+records].

In our opinion, *blocks* and *row records* describe these data formats more memorably than the alternatives, so we use them to define our transforms as well: 

- *blocks to row-records* (i.e., pivoting or "tall to wide")

- *row-records to blocks* (i.e., un-pivoting or "wide to tall")






## Why transform?

We transform data between blocks and row records to meet specific needs. For example, one of the first things to do when learning a new graphing package in R is to understand the data shape the package requires---some, like [ggplot2](https://CRAN.R-project.org/package=ggplot2), require blocks; others, like the [likert](https://CRAN.R-project.org/package=likert) package, require row records if the survey data is in summary form (frequencies counted) but requires blocks if not summarized, i.e., one row per respondent, one column per question.

Row records are generally preferred for publishing a data table such as Table 3 and they support analytical tasks as well. For example, the academic program metric "stickiness" is the ratio of the number of graduates from a program to the number ever enrolled in the program. With a data frame `df` organized like the Table 3 data, computing stickiness requires one line of code operating on values in the same row, e.g., 

```r
# base R
df$stickiness <- df$graduates / df$ever_enrolled
```

Blocks, on the other hand, are convenient for grouping and summarizing operations and, as stated earlier, are required for making charts with ggplot2. For example, with a data frame `blocks` organized like the Table 4 data, the three column names are variables used as arguments in the `aes()` function that appear in the chart on the horizontal scale (N), the vertical scale (programs), and the legend (peer groups). 

```{r}
#| echo: false
blocks[, max_N := max(N), by = "program"]
blocks$program <- factor(blocks$program)
blocks[, program := reorder(program, max_N)]
blocks$max_N <- NULL
```


```{r fig.asp = 0.3}
library(ggplot2)
ggplot(blocks, aes(x = N, 
                   y = program, 
                   color = peer_group, 
                   shape = peer_group)) +
  geom_point(size = 3) +
  theme_light()
```






## Setup 

*Load* packages.

```{r}
library("data.table")
library("dplyr", warn.conflicts = FALSE)
library("tidyr")
library("cdata")
```

*Format* data as described in the  [Introduction](data-shaping-00-introduction.html).

```{r}
cohort <- fread("data/three_blocs.csv")
```

```{r}
#| class: base
# base R
cohort_df <- data.frame(cohort)
```

```{r}
#| class: dtbl
# data.table
cohort_dt <- copy(cohort)
```

```{r}
#| class: dplyr
# dplyr
cohort_tbl <- tibble(cohort)
```

```{r}
cohort_dt
```

<br>

*Count* by program and peer group as described in [Aggregating transforms](data-shaping-03-aggregating-transforms.html#counting). The result is in block-records format. 

```{r}
key_columns <- c("program", "peer_group") 
```

```{r}
#| class: base
# base R
freq_table <- table(cohort_df$program,
                    cohort_df$peer_group,
                    dnn = key_columns)
blocks_df <- as.data.frame(freq_table, 
                         responseName = "N",
                         stringsAsFactors = FALSE)
```

```{r}
#| class: dtbl
# data.table
blocks_dt <- cohort_dt[, .N, by = key_columns]
setorder(blocks_dt, program, -N)
```

```{r}
#| class: dplyr
# dplyr
blocks_tbl <- cohort_tbl %>%
 count(program, peer_group, name = "N")
```

```{r}
blocks_dt

check_equiv_frames(blocks_df, blocks_dt)
check_equiv_frames(blocks_dt, blocks_tbl)
```



## Blocks to row-records

In this transform, we group a set of rows that go together (matching on keys) and combine them into one row by adding columns. The result is in *row-records* form, with one row per program. 

[Task.]{.important} Transform the three-cohorts data frame from block-records to row-records format, using `program` as the primary key.  

```{r}
#| class: dtbl
# data.table
rowrecs_dt <- dcast(blocks_dt, 
                    program ~ peer_group, 
                    value.var = "N")
                    setkey(rowrecs_dt, NULL)
```

```{r}
#| class: dplyr
# tidyr
rowrecs_tbl <- blocks_tbl %>%
  pivot_wider(id_cols = program, 
              names_from = peer_group, 
              values_from = N)
```

```{r}
#| class: other
# cdata
rowrecs_df <- pivot_to_rowrecs(blocks_df,  
                               rowKeyColumns = "program", 
                               columnToTakeKeysFrom = "peer_group",
                               columnToTakeValuesFrom = "N")
```

```{r}
rowrecs_dt

check_equiv_frames(rowrecs_df, rowrecs_dt)
check_equiv_frames(rowrecs_dt, rowrecs_tbl)
```

[Comments]{.important} 

- In all cases, the same transformation occurs: column `program` remains a *row key* column; the values of the `peer_group` column (`ever_enrolled`, `graduates`, `starters`) become new key column *names* with *values* taken from the `N` column. 

- *data.table.* `dcast()` uses a formula `LHS ~ RHS`

- *tidyr* `pivot_wider()`, an updated approach to `spread()`. 

- *cdata.* `pivot_to_rowrecs()`, a special case of the more general function `blocks_to_rowrecs()`.





## Row-records to blocks

In this transform---the inverse of  blocks to row-records---each row is disassembled and used to make a block of many rows. Each block of records in the new data frame has as many rows per record as there are columns we take measurements from. 

[Task.]{.important} Transform the results from the previous example  from row-records to block-records format, using `program` as the primary key and all other column names collected under a new secondary key column `peer_group`. 

```{r}
#| class: dtbl
# data.table
blocks_dt_2 <- melt(
  rowrecs_dt, 
  measure.vars = c("ever_enrolled", "graduates", "starters"), 
  variable.name = "peer_group", 
  value.name = "N", 
  variable.factor = FALSE
)
setorderv(blocks_dt_2, c("program", "peer_group"))
```

```{r}
#| class: dplyr
# tidyr
blocks_tbl <- rowrecs_tbl %>%
  pivot_longer(
  cols = c("ever_enrolled", "graduates", "starters"),
  names_to = "peer_group", 
  values_to = "N"
)
```

```{r}
#| class: other
# cdata
blocks_df <- unpivot_to_blocks(
  rowrecs_df, 
  columnsToTakeFrom = c("ever_enrolled", "graduates", "starters"),
  nameForNewKeyColumn = "peer_group", 
  nameForNewValueColumn = "N"
)
```

```{r}
blocks_dt_2

check_equiv_frames(blocks_df, blocks_dt_2)
check_equiv_frames(blocks_dt_2, blocks_tbl)
```

[Comments]{.important} 

- In all cases, the same transformation occurs: column names are identified (`ever_enrolled`, `graduates`, `starters`) and collected in a new key column (`peer_group`); the values from these columns are collected in a new payload column (`N`); and column names not selected (`program`) are treated as keys, copied to each record row in the result.

- *data.table* `melt()`

- *tidyr* `pivot_longer()`, an updated approach to `gather()`

- *cdata* `unpivot_to_blocks()` a special case of the more general function `rowrecs_to_blocks()`. 

Confirm that the result is equivalent to the original blocks form. 

```{r}
check_equiv_frames(blocks_dt, blocks_dt_2)
```



## Next steps

Reshaping transforms can also be applied to more than one column, though we don't cover that use case here. For those interested:  

- data.table's `dcast()` allows more complicated transforms, such as casting to multiple variables and aggregations at the same time.

- cdata has simple methods for conversions of many columns at once using `blocks_to_rowrecs()` and `rowrecs_to_blocs()` plus a "control table".  See, for example, [Faceted graphs with cdata and ggplot2](https://win-vector.com/2018/10/21/faceted-graphs-with-cdata-and-ggplot2/)

- tidyr has similar functions, inspired by cdata, using `pivot_longer_spec()` and `pivot_wider_spec()`. See [Pivot data from long to wide using a spec](https://tidyr.tidyverse.org/reference/pivot_wider_spec.html). 









## References 

<div id="refs"></div>

