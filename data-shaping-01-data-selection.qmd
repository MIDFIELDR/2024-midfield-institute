---
title: "Data selection"
---

![Image: *Select* by Mike Lawrence is licensed under [CC BY 2.0](https://creativecommons.org/licenses/by/2.0/)](figures/data-shaping-1.png)

```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(comment = "#>", 
                      collapse = TRUE, 
                      message = FALSE)
```

Using **base R**, **data.table**, and **dplyr/tidyr** to transform MIDFIELD data as needed for your analysis.

In this section we demonstrate subsetting rows and columns in various configurations, removing records with incomplete data, and reordering rows and columns.  


## Setup

*Load* packages.

```{r}
library("midfielddata")
library("data.table")
library("dplyr", warn.conflicts = FALSE)
library("tidyr")
library("wrapr")
```

*Format* data as described in the  [Introduction](data-shaping-00-introduction.html).

```{r}
data(student, term)
```

```{r}
#| class: base
# base R
student_df <- data.frame(student)
term_df <- data.frame(term)
```

```{r}
#| class: dtbl
# data.table
student_dt <- copy(student)
term_dt <- copy(term)
```

```{r}
#| class: dplyr
# dplyr
student_tbl <- tibble(student)
term_tbl <- tibble(term)
```

<br>


## Subsetting rows and columns

A common task when working with data is selecting a subset of rows,  columns, or both. 




### Indirect indexing

Using intermediate variables `columns_we_want` and `rows_we_want` that refer to the values used to subset rows and columns.

[Task.]{.important} Prepare data to summarize domestic students by race, sex, and institution.

Our first step might be to subset columns (institution, race, sex, and us_citizen) and subset rows such that US citizenship is true. 

```{r}
# character vector of column names
columns_we_want <- c("institution", "race", "sex", "us_citizen")
```

```{r}
#| class: base
# base R
rows_we_want <- student_df$us_citizen == "Yes"
result_df <- student_df[rows_we_want, columns_we_want, drop = FALSE]
```

```{r}
#| class: dtbl
# data.table
rows_we_want <- student_dt$us_citizen == "Yes"
result_dt <- student_dt[rows_we_want, ..columns_we_want]
```

```{r}
#| class: dplyr
# dplyr
rows_we_want <- student_tbl$us_citizen == "Yes"
result_tbl <- student_tbl %>%
  select(all_of(columns_we_want)) %>%
  filter(rows_we_want)
```

```{r}
result_dt

check_equiv_frames(result_df, result_dt)
check_equiv_frames(result_dt, result_tbl)
```

[Comments]{.important}

- *base R.* Base R's default behavior when selecting a single column is to return a vector. Thus, when working with `[,]` always add a third argument `drop = FALSE` to ensure a data frame is returned. 

- *data.table.* The `..` notation indicates that `columns_we_want` refers to a character vector of column names and is not itself a column name. 

- *dplyr.* The added notation `all_of()` in effect serves the same purpose in dplyr as `..` does in data.table. 

### Direct indexing

Column and row selection that is typed directly into the subsetting operators `[,]` or `filter()` and `select()` without using intermediate variables. 

[Task.]{.important} Same as previous example. 

```{r}
#| class: base
# base R
result_df <- student_df[student_df$us_citizen == "Yes",
  c("institution", "race", "sex", "us_citizen"),
  drop = FALSE
]
```

```{r}
#| class: dtbl
# data.table
result_dt <- student_dt[us_citizen == "Yes", .(institution, race, sex, us_citizen)]
```

```{r}
#| class: dplyr
# dplyr
result_tbl <- student_tbl %>%
  select(institution, race, sex, us_citizen) %>%
  filter(us_citizen == "Yes")
```

```{r}
result_dt

check_equiv_frames(result_df, result_dt)
check_equiv_frames(result_dt, result_tbl)
```

[Comments]{.important}

- *base R.* For direct indexing, intermediate variable names in `[,]` are replaced verbatim by their values. 

- *data.table.* The notation `.()` subsets columns by name without quotation marks;  rows are subset without the `$` operator.

- *dplyr.* Similarly, `select()` operates on unquoted column names; rows are subset without the `$` operator. 

### Subset rows with multiple conditions

Multiple logical conditions are combined with operators such as & (and), | (or), ! (not), etc.  

[Task.]{.important} Find IDs of transfer students with 15 or more credit hours transferred.   

When a variable is overwritten multiple times to get to a result, we will sometimes employ the variable `DF` as an intermediate variable. 

```{r}
columns_we_want <- c("mcid", "transfer", "hours_transfer")
```

```{r}
#| class: base
# base R
rows_we_want <- student_df$transfer == "First-Time Transfer" & student_df$hours_transfer >= 15
DF <- student_df[rows_we_want, columns_we_want, drop = FALSE]

# remove rows with NA in every column
rows_we_want <- rowSums(is.na(DF)) < ncol(DF)
result_df <- DF[rows_we_want, , drop = FALSE]
```

```{r}
#| class: dtbl
# data.table
result_dt <- student_dt[transfer == "First-Time Transfer" & hours_transfer >= 15, ..columns_we_want]
```

```{r}
#| class: dplyr
# dplyr
result_tbl <- student_tbl %>%
  select(mcid, transfer, hours_transfer) %>%
  filter(transfer == "First-Time Transfer" & hours_transfer >= 15)
```
 
```{r}
result_dt

check_equiv_frames(result_df, result_dt)
check_equiv_frames(result_dt, result_tbl)
```

[Comments]{.important}

- *base R.* Two steps required. Subset rows by the original logical conditions; then subset to remove rows with NA across all columns. `rowSums()` assigns 1 to TRUE and 0 to FALSE. If the number of NAs in a row is less than the number of columns, then that row contains non-NA data and we keep it.

- *data.table.* Multiple conditions separated by logical AND `&`. Does not generate all-NA rows as in base R.  

- *dplyr.* Similar. 

### Subset rows to omit values

Sometimes the intention of a row subset is to keep all rows except those that contain a particular value---implemented with a logical NOT (`!`). 

[Task.]{.important} Retain all rows of the `student` data except those with an "unknown" value (case-insensitive) in the `sex` column. 

```{r}
#| class: base
# base R
rows_we_want <- !grepl("unknown", student_df$sex, ignore.case = TRUE)
result_df <- student_df[rows_we_want, , drop = FALSE]
```

```{r}
#| class: dtbl
# data.table
result_dt <- student_dt[!sex %ilike% "unknown"]
```

```{r}
#| class: dplyr
# dplyr
result_tbl <- student_tbl %>%
  filter(!grepl("unknown", sex, ignore.case = TRUE))
```
 
```{r}
glimpse(result_dt)

check_equiv_frames(result_df, result_dt)
check_equiv_frames(result_dt, result_tbl)
```

[Comments]{.important}

- *base R.* Uses `grepl()` 

- *data.table.* `%ilike%` is shorthand for `grepl()` with `ignore.case = TRUE`

- *dplyr.* Also uses `grepl()`

Confirm that the correct rows have been deleted. 

```{r}
# Before deletions
sort(unique(student_dt$sex))
# After deletions 
sort(unique(result_dt$sex))
```








### Subset one column as a vector

[Task.]{.important} Obtain a vector (`vec`) of unique IDs in the `term` dataset.

Because results are vectors, we compare using `all.equal()` instead of `check_equiv_frames()`. 

```{r}
#| class: base
# base R
vec_base <- term_df[, "mcid"]
vec_base <- unique(vec_base)
```

```{r}
#| class: dtbl
# data.table
vec_dtbl <- term_dt[, mcid]
vec_dtbl <- unique(vec_dtbl)
```

```{r}
#| class: dplyr
# dplyr
vec_dplyr <- term_tbl %>%
  pull(mcid) %>%
  unique()
```

```{r}
str(vec_dtbl)

all.equal(vec_base, vec_dtbl)
all.equal(vec_dtbl, vec_dplyr)
```

[Comments]{.important}

- *base R.* For clarity, we deliberately write these steps in two lines of code. One could just as easily write the single line `result_df <- unique(term_df[, "mcid"])`.

- *data.table.* 

- *dplyr.* `pull(mcid)` is safe as long as the `mcid` column exists in the data frame from which it is pulled. Safer to use `pull(.data$mcid)` as described in [@Layton:2024]. 






## Removing rows with incomplete records

An important variation of subsetting data is removing rows of data that have missing values. If appropriate, limit the dropped rows to those with missing values in specific columns. 

[Task.]{.important} We are asked to compare SAT scores by institution. Before doing any analysis, we first remove rows with missing SAT scores. 

### Delete rows with a missing value in any column. 

```{r}
#| class: base
# base R
DF <- student_df[, c("institution", "sat_math", "sat_verbal"), drop = FALSE]
result_df <- na.omit(DF)
```

```{r}
#| class: dtbl
# data.table
DT <- student_dt[, .(institution, sat_math, sat_verbal)]
result_dt <- na.omit(DT)
```

```{r}
#| class: dplyr
# dplyr
result_tbl <- student_tbl %>%
  select(institution, sat_math, sat_verbal) %>%
  drop_na()
```

```{r}
result_dt

check_equiv_frames(result_df, result_dt)
check_equiv_frames(result_dt, result_tbl)
```

[Comments]{.important} 

- *base R.* Where before we used the name `columns_we_want` to reference a character vector of column names, here we use the character vector itself. 

- *data.table.*  

- *dplyr.* `drop_na()` is from the tidyr package. 

### Delete rows with a missing value in specified colums.

[Task.]{.important} 

```{r}
#| class: base
# base R
rows_we_want <- !(is.na(student_df$institution) |
  is.na(student_df$sat_math) |
  is.na(student_df$sat_verbal))
result_df <- student_df[rows_we_want, , drop = FALSE]
```

```{r}
#| class: dtbl
# data.table
result_dt <- na.omit(student_dt, cols = c("institution", "sat_math", "sat_verbal"))
```

```{r}
#| class: dplyr
# dplyr
result_tbl <- student_tbl %>%
  drop_na(institution, sat_math, sat_verbal)
```

```{r}
result_dt

check_equiv_frames(result_df, result_dt)
check_equiv_frames(result_dt, result_tbl)
```

[Comments]{.important} 

- *base R.* Using logical operators `!` NOT and `|` OR to create a logical vector used as a row index. 

- *data.table.* The same function name `na.omit()` as base R but with an argument to drops rows with missing values in specified columns. Retains all columns. 

- *dplyr.* Similarly, `drop_na()` drops rows with missing values in  specified columns, retaining all columns. 


## Ordering rows or columns

We sometimes using the intermediate variables `order_index` (integer vector) or `order_cols` (character vector) to emphasize the steps of the ordering process. 

### Ascending rows

In all three systems, the default sort order is increasing (ascending) from rows 1 to *N*. 

[Task.]{.important} Suppose we want to know a student's level and declared major in their first term at their institution. We use the `term` dataset.  
We decide to order the rows first by institution, then by ID, then by term. In each case, we select columns in a separate operation so we can highlight the row-ordering operation.  

```{r}
columns_we_want <- c("institution", "mcid", "term", "level", "cip6")
```

```{r}
#| class: base
# base R
DF <- term_df[, columns_we_want, drop = FALSE]
order_index <- with(DF, order(institution, mcid, term))
result_df <- DF[order_index, , drop = FALSE]
```

```{r}
#| class: dtbl
# data.table
result_dt <- term_dt[, ..columns_we_want]
order_cols <- c("institution", "mcid", "term")
setorderv(result_dt, order_cols)
```

```{r}
#| class: dplyr
# dplyr
result_tbl <- term_tbl %>%
  select(institution, mcid, term, level, cip6) %>%
  arrange(institution, mcid, term)
```

```{r}
result_dt

all.equal(result_df, result_dt, check.attributes = FALSE)
all.equal(result_dt, result_tbl, check.attributes = FALSE)
```

[Comments]{.important} 

- *base R.* Using `with()`, we can list the variables to order by without using the `$` operator. 

- *data.table.* `setorderv()` reorders data in place---hence no assignment operator `<-` is required---and it operates on a character vector of column names.  

- *dplyr.* `arrange()` orders the rows of a data frame by the values of selected columns. 





### Descending rows 

When we want a decreasing (descending) row order, it is typically  needed for some but not all of our columns. 

[Task.]{.important}  Sort students by institution and descending transfer hours. 

```{r}
columns_we_want <- c("institution", "mcid", "hours_transfer")
```

```{r}
#| class: base
# base R
DF <- student_df[, columns_we_want, drop = FALSE]
DF <- na.omit(DF)
order_index <- with(DF, order(institution, -hours_transfer, mcid))
result_df <- DF[order_index, , drop = FALSE]
```

```{r}
#| class: dtbl
# data.table
DT <- student_dt[, ..columns_we_want]
result_dt <- na.omit(DT)
order_cols <- c("institution", "hours_transfer", "mcid")
setorderv(result_dt, order_cols, order = c(1, -1, 1))
```

```{r}
#| class: dplyr
# dplyr
result_tbl <- student_tbl %>%
  select(institution, mcid, hours_transfer) %>%
  drop_na() %>%
  arrange(institution, desc(hours_transfer), mcid)
```

```{r}
result_dt

all.equal(result_df, result_dt, check.attributes = FALSE)
all.equal(result_dt, result_tbl, check.attributes = FALSE)
```

[Comments]{.important} 

- *base R.* Base R does not provide a general way to sort individual variables in descending order, but a minus sign works with numerical variables. The `decreasing` argument, if used, applies to all variables. 

- *data.table.* In `setorderv()`, add the `order` argument with `1` for ascending and `-1` for descending. 

- *dplyr.* In `arrange()` apply `desc()` to the descending variable. 

### Ordering columns

Whenever we've subset columns using indirect or direct indexing, the placement of column names implicitly orders those columns. For example, using 

        columns_we_want <- c("institution", "race", "sex", "us_citizen")

as a column index yields a data frame with the columns in the order given. Sometimes however we want to move one or more columns to the left in a data frame. 

[Task.]{.important} Using the result from the previous example, move transfer hours to the leftmost column followed by ID. 

```{r}
#| class: base
# base R
column_order <- union(c("hours_transfer", "mcid"), names(result_df))
result_df <- result_df[, column_order, drop = FALSE]
```

```{r}
#| class: dtbl
# data.table
setcolorder(result_dt, c("hours_transfer", "mcid"))
```

```{r}
#| class: dplyr
# dplyr
result_tbl <- result_tbl %>%
  relocate(hours_transfer, mcid)
```

```{r}
result_dt

all.equal(result_df, result_dt, check.attributes = FALSE)
all.equal(result_dt, result_tbl, check.attributes = FALSE)
```

[Comments]{.important}

- *base R.* `union()` is a set operation that discards duplicated values. The resulting character vector contains all the column names, reordered, and sorting is performed by `[`.   

- *data.table.* `setcolorder()` changes the position of columns in a data frame, by reference, moving the specified columns to the "front". 

- *dplyr.*  `relocate()` changes the position of columns in a data frame moving the specified columns to the "front". 










## References 

<div id="refs"></div>

