[
  {
    "objectID": "tutorials.html",
    "href": "tutorials.html",
    "title": "Tutorial links",
    "section": "",
    "text": "Image: Tutors by David Power is licensed under CC BY-NC-ND 2.0\n\n\nCollected links to the Institute tutorials. See the Program for scheduling.\nPre-workshop tutorials\n\nR basics\nChart basics\nData basics\n\nWorkshop case study\n\nPart 1: Goals\n\nPart 2: Data\n\nPart 3: Results\n\nWorking with MIDFIELD research data\n\nFrom practice data to research data",
    "crumbs": [
      "Tutorial links"
    ]
  },
  {
    "objectID": "r-basics.html",
    "href": "r-basics.html",
    "title": "R basics",
    "section": "",
    "text": "An introduction to key concepts in R.\nLicense. This material is adapted from Getting started in R: Tinyverse edition by Bashir and Eddelbuettel (2018) which was licensed under CC BY-SA by ilustat. This adaptation and extension, R basics by Richard Layton, is licensed under CC BY-SA 2.0."
  },
  {
    "objectID": "r-basics.html#preface",
    "href": "r-basics.html#preface",
    "title": "R basics",
    "section": "Preface",
    "text": "Preface\nThis guide gives you a flavor of what R can do for you. To get the most out of this guide, do the examples and exercises as you read along.\nExperiment safely. Be brave and experiment with commands and options as it is an essential part of the learning process. Things can and will go “wrong”, like getting error messages or deleting things that you create. You can recover from most situations using “undo” ctrl Z (MacOS cmd Z) or restarting R with the RStudio menu Session &gt; Restart R.\nBefore starting. Our tutorials assume that you\n\nHave completed the Before you arrive instructions\n\nStart your R session by launching the RStudio project you created, e.g., midfield-institute-2023.Rproj\n\nIf you are in an RStudio project, the project name appears in the upper left corner of the RStudio window. Your project directory (folder) should look something like this:\nmidfield-institute-2023\\\n    data\\\n    results\\\n    scripts\\\n    midfield-institute-2023.Rproj"
  },
  {
    "objectID": "r-basics.html#getting-started",
    "href": "r-basics.html#getting-started",
    "title": "R basics",
    "section": "Getting started",
    "text": "Getting started\nStarting R & RStudio. R starts automatically when you open RStudio with a screen similar to Figure 1.\n\nSource: view and edit files, e.g., R scripts\n\nConsole: run lines of code interactively\n\nEnvironment: display currently saved R objects\nOutput: files, plots, packages, help\n\n\n\n\n\n\n\n\n\nFigure 1: RStudio pane layout. See RStudio’s User Guide Pane layout for details on contents and layout editing.\n\n\n\n\n\nThe console starts with information about the version number, license and contributors. The last line is a prompt (&gt;) that indicates R is ready to do something.\n\n\n\n\n\n\n\n\nFigure 2: Console at startup\n\n\n\n\n\nQuitting R & RStudio. When you quit RStudio you will be asked whether to Save workspace? with a yes or no option. If you choose Yes, your current workspace is restored the next time you open RStudio. But as long as you save your script, saving the workspace is unnecessary. I recommend you choose No.\nTo set No as the default option, from the RStudio menu select Tools &gt; Global Options.\n\nUn-check the box Restore .RData into workspace at startup\nSet Save workspace to .RData on exit: to “Never”\n\n\n\n\n\n\n\n\n\nFigure 3: RStudio global options default settings."
  },
  {
    "objectID": "r-basics.html#r-help",
    "href": "r-basics.html#r-help",
    "title": "R basics",
    "section": "R help",
    "text": "R help\nR’s built-in help system is an essential part of finding solutions to your R programming problems.\nhelp() function. From the R Console you can use the help() function or ?. For example, try the following two commands (which give the same result):\n# view the function help page\nhelp(mean)\n? mean\nIf you are asking for the package help page (assuming you have installed the package), type in the Console,\n# view a package help page\nhelp(package = \"midfieldr\")\nKeyword search. To do a keyword search use the function apropos() with the keyword in double quotes (“keyword”) or single quote (‘keyword’). For example:\n\n# keyword search \napropos(\"mean\")\n#&gt;  [1] \".colMeans\"     \".rowMeans\"     \"colMeans\"      \"kmeans\"       \n#&gt;  [5] \"mean\"          \"mean.Date\"     \"mean.default\"  \"mean.difftime\"\n#&gt;  [9] \"mean.POSIXct\"  \"mean.POSIXlt\"  \"rowMeans\"      \"weighted.mean\"\n\nThe lines of R output are labeled—here with [1], [5] , and [9]. These labels indicate the index or position of the first element in that line within the overall output (here, of length 12). Thus in this output vector, \".colMeans\" has index 1, \"mean\" has index 5, and \"mean.POSIXct\" has index 9.\nHelp examples. Use the example() function to run the examples at the end of the help for a function:\n\n# run the examples at the end of the help page\nexample(mean)\n#&gt; \n#&gt; mean&gt; x &lt;- c(0:10, 50)\n#&gt; \n#&gt; mean&gt; xm &lt;- mean(x)\n#&gt; \n#&gt; mean&gt; c(xm, mean(x, trim = 0.10))\n#&gt; [1] 8.75 5.50\n\nHere, the output of the mean() example has length 2 (8.75 5.50). The label [1] indicates that the number 8.75 has index 1.\nRStudio help. Rstudio provides search box in the Help tab in the Output pane to make your life easier (see Figure 1).\nOnline help. When you search online use [r] in your search terms, for example, “[r] linear regression”. Because we use data.table for data manipulation, I further recommend that you include data.table as a keyword, e.g., “[r][data.table] group and summarize”.\nThere is nearly always more than one solution to your problem—investigate the different options and try to use one whose arguments and logic you can follow. Limiting your browser’s search to the past year can sometimes eliminate out-of-date solutions.\n\nExercise 1.1Answer\n\n\nTry the following.\n\nhelp(median)\n? sd\n? max\n\n\n\nThe following help pages should appear in the RStudio Help pane.\n\n\n\n\n\n\nWarning. If an R command is not complete then R will show a plus sign (+) prompt on second and subsequent lines until the command syntax is correct.\n+ \nPress the escape key (ESC) to break out.\nHint. To recall a previous command, put your cursor in the Console and use the up arrow key (↑). To go between previously typed commands use the up and down arrow (↓) keys. To modify or correct a command use the left (←) and right arrow (→) keys."
  },
  {
    "objectID": "r-basics.html#r-scripts",
    "href": "r-basics.html#r-scripts",
    "title": "R basics",
    "section": "R scripts",
    "text": "R scripts\nCreating a script I recommend that you write your lines of code in a script. Scripts can saved, edited, and run again and again.\n\nUse File &gt; New File &gt; R Script to create a new R script\nFile &gt; Save As… to name the file (I suggest 01-r-basics.R), then save it to the scripts directory\nAt the top of the script, add a minimal header, something like:\n\n\n# R basics \n# your name \n# date \n\nThe hash symbol # denotes a comment in R, that is, a line that isn’t run. Comments are annotations to make the source code easier for humans to understand but are ignored by R.\nNext,\n\nUse library() to load packages used in the script.\n\n\n# packages\nlibrary(\"midfieldr\")\n\nNote: In a code chunk like the one above, you can click on the “Copy to clipboard” icon in the upper right corner to enable quick copy and paste from this document to your script.\nRunning a script\n\nRun the script by clicking the Source button. Some participants report that this does not always work. The workaround is to:\nSelect the lines you want to run then ctrl Enter (MacOS cmd Return). Use the keyboard shortcuts ctrl A (MacOS cmd A) to select all lines. (See the appendices for a table of useful keyboard shortcuts.)\n\nIf you see an error like this one,\n    Error in library(\"midfieldr\"): there is no package called 'midfieldr'\nthen you should install the missing package(s) and run the script again. You can review how to install a package here.\nUse your script throughout the tutorial. When a new chunk of code is given,\n\nCopy the line(s) of code into your script, save, and run.\n\nCheck your result by comparing it to the result in the tutorial.\nCheck what you’ve learned using the Your turn exercises."
  },
  {
    "objectID": "r-basics.html#r-concepts",
    "href": "r-basics.html#r-concepts",
    "title": "R basics",
    "section": "R concepts",
    "text": "R concepts\nIn R speak, scalars, vectors, variables and datasets are called objects. To create objects (things) we use the assignment operator (&lt;-).\nFor example, the object height is assigned a value of 173 as follows,\n\n# assign a value to a named object \nheight &lt;- 173\n\nTyping the name alone prints out its value,\n\n# view\nheight\n#&gt; [1] 173\n\nIn these notes, everything that comes back to us in the Console as the result of running a script is shown prefaced by #&gt;.\nObjects in your R project workspace are listed in the RStudio Environment pane. At this point, we have three objects in the environment.\n\nWarning: R is case sensitive. age and AgE are different:\n\n# illustrating case-sensitivity \nage &lt;- 10\nAgE &lt;- 50\n\n\n# display result\nage\n#&gt; [1] 10\nAgE\n#&gt; [1] 50\n\nNew lines. R commands are usually separated by a new line but they can also be separated by a semicolon (not recommended).\n\n# recommended style\nname &lt;- \"Leo\"\nage  &lt;- 25\ncity &lt;- \"Lisbon\"\n\n# views\nname\n#&gt; [1] \"Leo\"\nage\n#&gt; [1] 25\ncity\n#&gt; [1] \"Lisbon\"\n\n# style not recommended \nname &lt;- \"Leo\"; age &lt;- 25; city &lt;- \"Lisbon\"\n\n# view\nname; age; city\n#&gt; [1] \"Leo\"\n#&gt; [1] 25\n#&gt; [1] \"Lisbon\"\n\nComments. It is useful to put comments in your script—especially useful to the future you looking back at your script after several months.\nR comments start with a hash sign (#). Everything after the hash to the end of the line is ignored by R.\n\n# This comment line is ignored when run.\n\ncity # text after \"#\" is ignored.\n#&gt; [1] \"Lisbon\""
  },
  {
    "objectID": "r-basics.html#r-as-a-calculator",
    "href": "r-basics.html#r-as-a-calculator",
    "title": "R basics",
    "section": "R as a calculator",
    "text": "R as a calculator\nYou can use R as a calculator by typing in the Console. Try the following:\n\n# type in the console\n2 + 3\n#&gt; [1] 5\n\n(5 * 11) / 4 - 7\n#&gt; [1] 6.75\n\n7^3 # exponent\n#&gt; [1] 343\n\nOther math functions. You can also use standard mathematical functions that are typically found on a scientific calculator.\n\ntrigonometric: sin(), cos(), tan(), etc.\nrounding: abs(), ceiling(), floor(), round(), sign(), signif(), trunc()\nlogarithms and exponentials: log(), log10(), log2(), exp()\n\n\n# type in the console\n\n# square root\nsqrt(2)\n#&gt; [1] 1.414214\n\n# round down to nearest integer\nfloor(8.6178)\n#&gt; [1] 8\n\n# round to 2 decimal places\nround(8.6178, 2)\n#&gt; [1] 8.62\n\n\nExercise 1.2Answer\n\n\nWhat do the following pairs of examples do?\n\nceiling(18.33); signif(9488, 2)\nexp(1); log10(1000)\nsign(-2.9); sign(32)\nabs(-27.9); abs(11.9)\n\n\n\n\n19 and 9500\n2.718 and 3\n-1 and 1\n27.9 and 11.9"
  },
  {
    "objectID": "r-basics.html#more-r-concepts",
    "href": "r-basics.html#more-r-concepts",
    "title": "R basics",
    "section": "More R concepts",
    "text": "More R concepts\nFrom this point, please type the R code chunks in your script, save and run, and compare your results to those shown.\nYou can do some useful things using the assignment operator (&lt;-), for example,\n\n# assign dimensions\nroom_length &lt;- 7.8\nroom_width  &lt;- 6.4\n\n# compute area\nroom_area &lt;- room_length * room_width\n\n# view\nroom_area\n#&gt; [1] 49.92\n\nOn coding style. Summary of commonly used coding styles for naming objects in R include:\n\n\n\nstyle\nexample\n\n\n\n\nsnake case\nroom_area\n\n\ncamel case\nroomArea\n\n\nPascal case\nRoomArea\n\n\n\nWe use snake case, that is, lowercase letters and numbers with words separated by underscores. You may of course use any style you are comfortable with.\nText objects. You can assign text to an object.\n\n# assign text to an object\ngreeting &lt;- \"Hello world!\"\n\n# view\ngreeting\n#&gt; [1] \"Hello world!\"\n\nVectors. The objects presented so far have been scalars (single values). Working with vectors is where R shines best as they are the basic building blocks of datasets.\nWe can create a vector using the c() (combine values into a vector) function.\n\n# a numeric vector\nx1 &lt;- c(26, 10, 4, 7, 41, 19)\n\n# view\nx1\n#&gt; [1] 26 10  4  7 41 19\n\n# a character vector\nx2 &lt;- c(\"Peru\", \"Italy\", \"Cuba\", \"Ghana\")\n\n# view\nx2\n#&gt; [1] \"Peru\"  \"Italy\" \"Cuba\"  \"Ghana\"\n\nThere are many other ways to create vectors, for example, rep() (replicate elements) and seq() (create sequences):\n\n# repeat vector (2, 6, 7, 4) three times\nr1 &lt;- rep(c(2, 6, 7, 4), times = 3)\n\n# view\nr1\n#&gt;  [1] 2 6 7 4 2 6 7 4 2 6 7 4\n\n\n# vector from -2 to 3 incremented by 0.5\ns1 &lt;- seq(from = -2, to = 3, by = 0.5)\n\n# view\ns1\n#&gt;  [1] -2.0 -1.5 -1.0 -0.5  0.0  0.5  1.0  1.5  2.0  2.5  3.0\n\nVector operations. You can do calculations on vectors, for example using x1 from above:\n\n# multiply every element by 2\nx1 * 2\n#&gt; [1] 52 20  8 14 82 38\n\n# operation order: product, root, then round\nround(sqrt(x1 * 2.6), 2)\n#&gt; [1]  8.22  5.10  3.22  4.27 10.32  7.03\n\nMissing values. Missing values are coded as NA in R. For example,\n\n# numeric vector with a missing value\nx2 &lt;- c(3, -7, NA, 5, 1, 1)\n\n# view\nx2\n#&gt; [1]  3 -7 NA  5  1  1\n\n# character vector with a missing value\nx3 &lt;- c(\"rat\", NA, \"mouse\", \"hamster\")\n\n# view\nx3\n#&gt; [1] \"rat\"     NA        \"mouse\"   \"hamster\"\n\nManaging objects. Use function ls() to list the objects in your workspace. The rm() function deletes them.\n\n# view objects in workspace\nls()\n#&gt;  [1] \"age\"             \"AgE\"             \"city\"            \"greeting\"       \n#&gt;  [5] \"has_annotations\" \"height\"          \"name\"            \"r1\"             \n#&gt;  [9] \"room_area\"       \"room_length\"     \"room_width\"      \"s1\"             \n#&gt; [13] \"x\"               \"x1\"              \"x2\"              \"x3\"             \n#&gt; [17] \"xm\"\n\n# remove objects\nrm(x1, x2, x3, r1, s1, AgE, age)\n\n# view result\nls()\n#&gt;  [1] \"city\"            \"greeting\"        \"has_annotations\" \"height\"         \n#&gt;  [5] \"name\"            \"room_area\"       \"room_length\"     \"room_width\"     \n#&gt;  [9] \"x\"               \"xm\"\n\n\nExercise 1.3Answer\n\n\nAdd the tax to the net amount and round to the nearest integer.\n\nnet &lt;- c(108.99, 291.42, 16.28, 62.29, 31.77)\ntax &lt;- c(22.89, 17.49, 0.98, 13.08, 6.67)\n\n\n\n\n#&gt; [1] 132 309  17  75  38"
  },
  {
    "objectID": "r-basics.html#r-functions-and-packages",
    "href": "r-basics.html#r-functions-and-packages",
    "title": "R basics",
    "section": "R functions and packages",
    "text": "R functions and packages\nR functions. We have already used some R functions (e.g. c(), mean(), rep(), sqrt(), round()). Most computation in R involves functions.\nA function essentially has a name and a list of arguments separated by commas. For example:\n\n# closer look at function arguments\nseq(from = 5, to = 8, by = 0.4)\n#&gt; [1] 5.0 5.4 5.8 6.2 6.6 7.0 7.4 7.8\n\n\nthe function name is seq\nthe function has three arguments from (the start value), to (the end value), and by (the increment between values)\narguments are assigned values (using =) within the parentheses and are separated by commas\n\nThe seq() function has other arguments, documented in the help page. For example, we could use the argument length.out (instead of by) to fix the length of the sequence as follows:\n\n# replacing `by` with `length.out` \nseq(from = 5, to = 8, length.out = 16)\n#&gt;  [1] 5.0 5.2 5.4 5.6 5.8 6.0 6.2 6.4 6.6 6.8 7.0 7.2 7.4 7.6 7.8 8.0\n\nCustom functions. As you gain familiarity with R, you may want to learn how to construct your own custom functions, but that’s not an objective of our “basics” tutorials.\nR packages. The basic R installation comes with over 2000 functions, but R can be extended further using contributed packages. Packages are like “apps” for R, containing functions, data, and documentation.\nTo see a list of functions and data sets bundled in a package, use the ls() function, e,g,\n\nls(\"package:midfieldr\")\n#&gt;  [1] \"add_completion_status\" \"add_data_sufficiency\"  \"add_timely_term\"      \n#&gt;  [4] \"baseline_mcid\"         \"cip\"                   \"filter_cip\"           \n#&gt;  [7] \"fye_proxy\"             \"order_multiway\"        \"prep_fye_mice\"        \n#&gt; [10] \"same_content\"          \"select_required\"       \"study_observations\"   \n#&gt; [13] \"study_programs\"        \"study_results\"         \"toy_course\"           \n#&gt; [16] \"toy_degree\"            \"toy_student\"           \"toy_term\"\n\nAlternatively, in RStudio select the Packages tab and in its menu bar type the package name in the search box. In the pane, click on the package name. A help page opens listing all the functions and names of data sets in the package, e.g.,\n\nIn MIDFIELD work, we use a small number of R packages:\n\nmidfieldr for tools to study student unit records\nmidfielddata for practice data\ndata.table for manipulating data\nggplot2 for charts"
  },
  {
    "objectID": "r-basics.html#about-r-objects",
    "href": "r-basics.html#about-r-objects",
    "title": "R basics",
    "section": "About R objects",
    "text": "About R objects\nEverything in R has class.\n\nclass(room_area)  # assigned earlier\n#&gt; [1] \"numeric\"\n\nclass(greeting)   # assigned earlier\n#&gt; [1] \"character\"\n\nclass(seq)        # R function \n#&gt; [1] \"function\"\n\nCertain actions will change the class of an object. Suppose we create a vector from the room_area and greeting objects.\n\nx &lt;- c(room_area, greeting)\nx\n#&gt; [1] \"49.92\"        \"Hello world!\"\n\nclass(x)\n#&gt; [1] \"character\"\n\nBy concatenating a number and a character string, R changed the class of room area from “numeric” to “character” because all elements of a vector must have the same class.\nData frames. The most common class of data object we will use is the data frame: a two-dimensional array of rows and columns in R. All values in a column are of the same type (numerical, character, logical, etc.) but columns can be of different types.\nFor example, the data frame study_results that is bundled with midfieldr has three character columns and three numerical columns.\n\n# a data frame bundled with midfieldr\nstudy_results\n#&gt;     program    sex            race ever_enrolled graduates stickiness\n#&gt;  1:      CE Female           Asian            15        10       66.7\n#&gt;  2:      CE Female           Black             4         1       25.0\n#&gt;  3:      CE Female   International            23        13       56.5\n#&gt;  4:      CE Female          Latine            13         6       46.2\n#&gt;  5:      CE Female Native American             1         1      100.0\n#&gt;  6:      CE Female   Other/Unknown             5         3       60.0\n#&gt;  7:      CE Female           White           263       162       61.6\n#&gt;  8:      CE   Male           Asian            30        25       83.3\n#&gt;  9:      CE   Male           Black             8         5       62.5\n#&gt; 10:      CE   Male   International            97        55       56.7\n#&gt; 11:      CE   Male          Latine            66        31       47.0\n#&gt; 12:      CE   Male Native American             3         1       33.3\n#&gt; 13:      CE   Male   Other/Unknown            27        11       40.7\n#&gt; 14:      CE   Male           White           949       612       64.5\n#&gt; 15:      EE Female           Asian            21        12       57.1\n#&gt; 16:      EE Female           Black             6         3       50.0\n#&gt; 17:      EE Female   International            28         9       32.1\n#&gt; 18:      EE Female          Latine             8         3       37.5\n#&gt; 19:      EE Female Native American             1         0        0.0\n#&gt; 20:      EE Female   Other/Unknown             7         3       42.9\n#&gt; 21:      EE Female           White           118        56       47.5\n#&gt; 22:      EE   Male           Asian           123        71       57.7\n#&gt; 23:      EE   Male           Black            29        17       58.6\n#&gt; 24:      EE   Male   International           195        90       46.2\n#&gt; 25:      EE   Male          Latine            45        17       37.8\n#&gt; 26:      EE   Male Native American             3         0        0.0\n#&gt; 27:      EE   Male   Other/Unknown            42        16       38.1\n#&gt; 28:      EE   Male           White           864       439       50.8\n#&gt; 29:     ISE Female           Asian            15        10       66.7\n#&gt; 30:     ISE Female           Black             7         6       85.7\n#&gt; 31:     ISE Female   International             6         2       33.3\n#&gt; 32:     ISE Female           White            77        54       70.1\n#&gt; 33:     ISE   Male           Asian            24        14       58.3\n#&gt; 34:     ISE   Male           Black             9         6       66.7\n#&gt; 35:     ISE   Male   International            22        12       54.5\n#&gt; 36:     ISE   Male          Latine             6         4       66.7\n#&gt; 37:     ISE   Male           White           187       130       69.5\n#&gt; 38:      ME Female           Asian             7         1       14.3\n#&gt; 39:      ME Female           Black             3         2       66.7\n#&gt; 40:      ME Female   International            19        11       57.9\n#&gt; 41:      ME Female          Latine            12         8       66.7\n#&gt; 42:      ME Female   Other/Unknown             8         4       50.0\n#&gt; 43:      ME Female           White           213       134       62.9\n#&gt; 44:      ME   Male           Asian            76        49       64.5\n#&gt; 45:      ME   Male           Black            30        19       63.3\n#&gt; 46:      ME   Male   International           178        89       50.0\n#&gt; 47:      ME   Male          Latine            79        42       53.2\n#&gt; 48:      ME   Male Native American             5         1       20.0\n#&gt; 49:      ME   Male   Other/Unknown            80        41       51.2\n#&gt; 50:      ME   Male           White          1596       953       59.7\n#&gt;     program    sex            race ever_enrolled graduates stickiness\n\nclass(study_results)\n#&gt; [1] \"data.table\" \"data.frame\"\n\nThe class() function reveals that this data.frame object is also a data.table object, which is an enhanced version of R’s standard data frame.\n\nExercise 1.4Answer\n\n\nFor the following midfieldr objects, determine:\n\nthe class of add_timely_term\nthe class of toy_student\nthe names of the variables in toy_term\n\n\n\n\nfunction\ndata.table, data.frame\nmcid, institution, term, cip6, level\n\n\n\n\nEverything in R has structure\n\nstr(room_area)  # assigned earlier\n#&gt;  num 49.9\n\nstr(greeting)         # assigned earlier\n#&gt;  chr \"Hello world!\"\n\nstr(seq)              # R function \n#&gt; function (...)\n\nstr(study_results)\n#&gt; Classes 'data.table' and 'data.frame':   50 obs. of  6 variables:\n#&gt;  $ program      : chr  \"CE\" \"CE\" \"CE\" \"CE\" ...\n#&gt;  $ sex          : chr  \"Female\" \"Female\" \"Female\" \"Female\" ...\n#&gt;  $ race         : chr  \"Asian\" \"Black\" \"International\" \"Latine\" ...\n#&gt;  $ ever_enrolled: int  15 4 23 13 1 5 263 30 8 97 ...\n#&gt;  $ graduates    : int  10 1 13 6 1 3 162 25 5 55 ...\n#&gt;  $ stickiness   : num  66.7 25 56.5 46.2 100 60 61.6 83.3 62.5 56.7 ...\n#&gt;  - attr(*, \".internal.selfref\")=&lt;externalptr&gt;\n\n\nExercise 1.5Answer\n\n\nUse str() to determine\n\nadd_timely_term arguments\ntoy_student dimensions\nstudy_results numerical variables\n\n\n\n\nThe str() function prints out the arguments and their default values within the parentheses:\n\n\nstr(add_timely_term)\n#&gt; function (dframe, midfield_term = term, ..., span = NULL, sched_span = NULL)\n\n\n99 rows and 4 columns\n3 variables: ever_enrolled, graduates, stickiness"
  },
  {
    "objectID": "r-basics.html#keyboard-shortcuts",
    "href": "r-basics.html#keyboard-shortcuts",
    "title": "R basics",
    "section": "Keyboard shortcuts",
    "text": "Keyboard shortcuts\n\nIf you are working in RStudio, you can see the menu of keyboard shortcuts using the menu Tools &gt; Keyboard Shortcuts Help.\nThe shortcuts we use regularly include\n\n\n\n\n\nWindows / Linux\nAction\nMac OS\n\n\n\n\nctrl shift K\nCompile R Markdown document\ncmd shift K\n\n\nctrl L\nClear the RStudio Console\nctrl L\n\n\nctrl shift C\nComment/uncomment line(s)\ncmd shift C\n\n\nctrl X, C, V\nCut, copy, paste\ncmd X, C, V\n\n\nctrl F\nFind in text\ncmd F\n\n\nctrl I\nIndent or re-indent lines od code\ncmd I\n\n\nalt –\nInsert the assignment operator &lt;-\noption –\n\n\nctrl alt B\nRun from begining to line\ncmd option B\n\n\nctrl alt E\nRun from line to end\ncmd option E\n\n\nctrl Enter\nRun selected line(s)\ncmd Return\n\n\nctrl S\nSave\ncmd S\n\n\nctrl A\nSelect all text\ncmd A\n\n\nctrl Z\nUndo\ncmd Z"
  },
  {
    "objectID": "license.html",
    "href": "license.html",
    "title": "Open source licenses",
    "section": "",
    "text": "Image: License and Registration Please by Thomas Hawk is licensed under CC BY-NC 2.0\n\n\nThe following licenses apply to the text, data, and code in these workshops. Our goal is to minimize legal encumbrances to the dissemination, sharing, use, and re-use of this work.\n\nCC-BY 4.0 for text.\n\nGPL-3 for code.\n\nCC0 for data.\n\nThe existing rights of authors whose text, code, or data are cited are reserved to those authors.\nWhere noted, works adapted under another license are distributed under the same license.",
    "crumbs": [
      "License"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "2024 MIDFIELD Institute\nLocation: Virtual\nDates: June 11 (office hours)\n\\(\\qquad\\ \\,\\) June 12–14 (workshop)\nTime: 1–5 pm Eastern Time (US)\n\n\n\n\n\n\n\n\n\nRegistration. Click here to email us that you are interested in attending the Institute. If the link fails, email Susan Lord (slord@sandiego.edu) with the subject line Register for 2024 MIDFIELD Institute.\n\n\n\nWe welcome faculty, staff, graduate students, and anyone interested in exploring MIDFIELD.\nOur learning objectives can be categorized in two broad classes: qualitative and computational. Qualitatively, by the end of the workshop participants should be able to:\n\nDescribe the data available in MIDFIELD\n\nDescribe how the MIDFIELD data are organized\n\nDescribe key principles of effective data visualization\nDraft a research question that can be addressed using MIDFIELD\n\nComputationally, participants should be able use midfieldr, an R package specifically designed for use with MIDFIELD, to:\n\nSubset MIDFIELD data to obtain a population to study\n\nClassify student records by desired groupings\n\nSummarize the data by groups and display results",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "chart-basics.html",
    "href": "chart-basics.html",
    "title": "R chart basics",
    "section": "",
    "text": "Figure from: Richard Layton, Stacked-bar alternatives , https://graphdr.github.io/data-stories/posts/2022-01-14-stacked-bar-alternatives/\nUsing ggplot2 to create charts in R.\nLicense. This material is adapted from Getting started in R: Tinyverse edition by Bashir and Eddelbuettel (2018) which was licensed under CC BY-SA by ilustat. This adaptation and extension, R chart basics by Richard Layton, is licensed under CC BY-SA 2.0."
  },
  {
    "objectID": "chart-basics.html#preface",
    "href": "chart-basics.html#preface",
    "title": "R chart basics",
    "section": "Preface",
    "text": "Preface\nThe rationale for using the ggplot2 package instead of other R graphics environments (e.g., lattice, base R, or grid graphics) is nicely summarized by Zumel and Mount—it “excels at combining multiple graphical elements together” even though “its syntax can take some getting used to” (Zumel & Mount, 2020, p. 60). They raise three key points:\n\nGraphs in ggplot2 are defined only on data frames. The variables from the data frame—assigned to the x-axis, the y-axis, or to the color or size of a data marker—are called aesthetics, declared using the aes() function.\nThe ggplot() function declares the graph object; its arguments can include the data frame of interest and the aesthetics. The ggplot() function doesn’t itself produce a visualization; visualizations are produced by layers.\nLayers produce the plots and plot transformations and are added to a graph object using the + operator. Each layer can also take a data frame and aesthetics as arguments, in addition to layer-specific parameters. Example of layers are geom_point() for a scatterplot and geom_line() for a line plot.\n\nBefore starting. Our tutorials assume that you\n\nHave completed the Before you arrive instructions\nHave completed the R basics guide\nStart your R session by launching the RStudio project you created, e.g., midfield-institute-2023.Rproj\n\nIf you are in an RStudio project, the project name appears in the upper left corner of the RStudio window. Your project directory (folder) should look something like this:\nmidfield-institute-2023\\\n    data\\\n    results\\\n    scripts\\\n    midfield-institute-2023.Rproj"
  },
  {
    "objectID": "chart-basics.html#getting-started",
    "href": "chart-basics.html#getting-started",
    "title": "R chart basics",
    "section": "Getting started",
    "text": "Getting started\nStart a new script. I recommend that you start a new script for this segment.\n\nUse File &gt; New File &gt; R Script to create a new R script\nFile &gt; Save As… to name the file (we suggest 02-chart-basics.R), then save it to the scripts directory\nAt the top of the script, add a minimal header, something like:\n\n\n# R chart basics\n# your name  \n# date \n\n\nUse library() to load packages used in the script.\n\n\n# silently load packages\nsuppressPackageStartupMessages(library(\"ggplot2\"))\nsuppressPackageStartupMessages(library(\"data.table\"))\n\n# set data.table printout options\noptions(\n  datatable.print.nrows = 20,\n  datatable.print.topn = 5,\n  datatable.print.class = TRUE\n)\n\nReminder: In a code chunk like the one above, you can click on the Copy to Clipboard icon  in the upper right corner to enable quick copy and paste from this document to your script.\nUse your script throughout the tutorial. When a new chunk of code is given,\n\nCopy the line(s) of code into your script, save, and run.\n\nCheck your result by comparing it to the result in the tutorial.\nCheck what you’ve learned using the Your turn exercises."
  },
  {
    "objectID": "chart-basics.html#data",
    "href": "chart-basics.html#data",
    "title": "R chart basics",
    "section": "Data",
    "text": "Data\nIntroduction. R comes with many datasets installed. We’ll use the ChickWeight data set to cover some basic data manipulation to prepare the data for graphing.\nThe help page for ChickWeight summarizes the experiment from which the data were collected,\n\nThe body weights of the chicks were measured at birth and every second day thereafter until day 20. They were also measured on day 21. There were four groups of chicks on different protein diets.”\n\nYou can view the help page by running,\nhelp(\"ChickWeight\")\nThere are 578 observations (rows) and 4 variables (columns). Recall that names are case-sensitive—weight is lowercase, the other variables are capitalized.\n\nChick: unique ID for each chick.\nDiet: one of four protein diets.\nTime: number of days since birth.\nweight: body weight of chick in grams.\n\nThe goal of graphing the data is to investigate the effect of diet on weight over time.\nDownload and save a CSV file. We use the data.table fread() function to read the data set from the workshop repository (an Internet connection is required).\nWe use fwrite() to save the file to the data directory in your project folder.\n# data URL\ndata_url &lt;- \"https://raw.githubusercontent.com/MIDFIELDR/2023-midfield-institute/main/data/chick_weight.csv\"\n\n# download the data\nchick_weight &lt;- fread(data_url)\n\n# write the data to your data directory\nfwrite(chick_weight, \"data/chick_weight.csv\")\nThese lines of code are run only once. After the data are downloaded, these lines can be commented out, e.g.,\n\n# # data URL\n# data_url &lt;- \"https://raw.githubusercontent.com/MIDFIELDR/2023-midfield-institute/main/data/chick_weight.csv\"\n# \n# # download the data\n# chick_weight &lt;- fread(data_url)\n# \n# # write the data to your data directory\n# fwrite(chick_weight, \"data/chick_weight.csv\")\n\nImport a CSV file. We import the data from the local file chick_weight.csv using fread(). This function returns a data.table object. A data.table is a data.frame with additional attributes.\n\ncw &lt;- fread(\"data/chick_weight.csv\")\n\nLook at the data. To look at the data, type the object (dataset) name:\n\n# view the data\ncw\n#&gt;      Chick  Diet  Time weight\n#&gt;      &lt;int&gt; &lt;int&gt; &lt;int&gt;  &lt;int&gt;\n#&gt;   1:    18     1     0     39\n#&gt;   2:    18     1     2     35\n#&gt;   3:    16     1     0     41\n#&gt;   4:    16     1     2     45\n#&gt;   5:    16     1     4     49\n#&gt;  ---                         \n#&gt; 574:    48     4    14    170\n#&gt; 575:    48     4    16    222\n#&gt; 576:    48     4    18    261\n#&gt; 577:    48     4    20    303\n#&gt; 578:    48     4    21    322\n\nSeveral base R functions help us inspect the data. In addition to str() that you used in the previous tutorial, we also have:\n\nsummary() provides a summary\nhead() and tail() display the beginning and end of the data set\n\n\nsummary(cw)\n#&gt;      Chick            Diet            Time           weight     \n#&gt;  Min.   : 1.00   Min.   :1.000   Min.   : 0.00   Min.   : 35.0  \n#&gt;  1st Qu.:13.00   1st Qu.:1.000   1st Qu.: 4.00   1st Qu.: 63.0  \n#&gt;  Median :26.00   Median :2.000   Median :10.00   Median :103.0  \n#&gt;  Mean   :25.75   Mean   :2.235   Mean   :10.72   Mean   :121.8  \n#&gt;  3rd Qu.:38.00   3rd Qu.:3.000   3rd Qu.:16.00   3rd Qu.:163.8  \n#&gt;  Max.   :50.00   Max.   :4.000   Max.   :21.00   Max.   :373.0\n\n\nExercise 2.1Answer\n\n\nUse tail() to examine the last observations in cw and compare to the last observations in the ChickWeight data set provided in base R. Do they agree? Describe the differences, if any.\n\n\nThe variables (columns) are the same but in different order. The observations (rows) are apparently in different order too.\n\n#&gt;    Chick  Diet  Time weight\n#&gt;    &lt;int&gt; &lt;int&gt; &lt;int&gt;  &lt;int&gt;\n#&gt; 1:    48     4    12    154\n#&gt; 2:    48     4    14    170\n#&gt; 3:    48     4    16    222\n#&gt; 4:    48     4    18    261\n#&gt; 5:    48     4    20    303\n#&gt; 6:    48     4    21    322\n#&gt;     weight Time Chick Diet\n#&gt; 573    155   12    50    4\n#&gt; 574    175   14    50    4\n#&gt; 575    205   16    50    4\n#&gt; 576    234   18    50    4\n#&gt; 577    264   20    50    4\n#&gt; 578    264   21    50    4\n\nAlso, the row numbers in cw (a data.table) are different from the row numbers in ChickWeight.\n\n\n\n\nExercise 2.2Answer\n\n\nUse str() to compare cw to the original ChickWeight in base R. How are they different?\n\n\ncw is a data.frame and a data.table object and the variables are all integers.\n\n#&gt; Classes 'data.table' and 'data.frame':   578 obs. of  4 variables:\n#&gt;  $ Chick : int  18 18 16 16 16 16 16 16 16 15 ...\n#&gt;  $ Diet  : int  1 1 1 1 1 1 1 1 1 1 ...\n#&gt;  $ Time  : int  0 2 0 2 4 6 8 10 12 0 ...\n#&gt;  $ weight: int  39 35 41 45 49 51 57 51 54 41 ...\n#&gt;  - attr(*, \".internal.selfref\")=&lt;externalptr&gt;\n\nChickWeight is a data.frame and a groupedData object (a type of ordered grouping). Two columns are integers but two are factors. We’ll discuss factors in due course.\n\n#&gt; Classes 'nfnGroupedData', 'nfGroupedData', 'groupedData' and 'data.frame':   578 obs. of  4 variables:\n#&gt;  $ weight: num  42 51 59 64 76 93 106 125 149 171 ...\n#&gt;  $ Time  : num  0 2 4 6 8 10 12 14 16 18 ...\n#&gt;  $ Chick : Ord.factor w/ 50 levels \"18\"&lt;\"16\"&lt;\"15\"&lt;..: 15 15 15 15 15 15 15 15 15 15 ...\n#&gt;  $ Diet  : Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 1 1 1 1 1 1 1 1 1 1 ...\n#&gt;  - attr(*, \"formula\")=Class 'formula'  language weight ~ Time | Chick\n#&gt;   .. ..- attr(*, \".Environment\")=&lt;environment: R_EmptyEnv&gt; \n#&gt;  - attr(*, \"outer\")=Class 'formula'  language ~Diet\n#&gt;   .. ..- attr(*, \".Environment\")=&lt;environment: R_EmptyEnv&gt; \n#&gt;  - attr(*, \"labels\")=List of 2\n#&gt;   ..$ x: chr \"Time\"\n#&gt;   ..$ y: chr \"Body weight\"\n#&gt;  - attr(*, \"units\")=List of 2\n#&gt;   ..$ x: chr \"(days)\"\n#&gt;   ..$ y: chr \"(gm)\""
  },
  {
    "objectID": "chart-basics.html#scatterplot",
    "href": "chart-basics.html#scatterplot",
    "title": "R chart basics",
    "section": "Scatterplot",
    "text": "Scatterplot\nOur goal is to examine how weight changes over time conditioned by diet.\nDon’t worry too much about the details of the ggplot2 syntax. To learn more, try different things even if you get an error message. No harm is done!\nFirst plot. Let’s plot the weight data (y axis) as a function of time (x axis). The first plot is empty because there is no “geom” (a geometric layer) to encode the data visually.\n\nggplot(data = cw, mapping = aes(x = Time, y = weight))\n\n\n\n\n\n\n\n\nNext we add the geom_point() layer to encode the data as points in a scatterplot.\n\nggplot(data = cw, mapping = aes(x = Time, y = weight)) + \n  geom_point()\n\n\n\n\n\n\n\n\n\nExercise 2.3Answer\n\n\n\nSwitch the variables Time and weight in the code chunk.\nWhat do you think of this new plot compared to the original?\n\n\n\nIn a time series, the visual convention (in Latin/Roman-descended societies) is for time to read from left to right, so this chart is not as intuitive as the earlier chart.\n\n\n\n\n\n\n\n\n\n\n\n\nLocation of +. The + symbol that adds a layer to a ggplot2 object cannot start a new line. Using the code above to illustrate,\n# correct\nggplot(cw, aes(weight, Time)) + geom_point()\n\n# correct\nggplot(cw, aes(weight, Time)) + \n  geom_point()\n\n# incorrect \nggplot(cw, aes(weight, Time)) \n  + geom_point()"
  },
  {
    "objectID": "chart-basics.html#another-variable",
    "href": "chart-basics.html#another-variable",
    "title": "R chart basics",
    "section": "Another variable",
    "text": "Another variable\nColor encodes a third variable. The graph does not differentiate between the diets. In the next step, we use color to encode Diet, a categorical variable with four levels: diets 1, 2, 3, and 4. One important thing to notice is that all arguments being “mapped” must be names of variables in the cw data frame.\n\nggplot(data = cw, mapping = aes(x = Time, y = weight, color = factor(Diet))) +\n  geom_point()\n\n\n\n\n\n\n\n\nIt is difficult to conclude anything from this graph as the points are printed on top of one another (with diet 4 overprinting diet 3 which overprints diet 2, etc.)."
  },
  {
    "objectID": "chart-basics.html#faceted-chart",
    "href": "chart-basics.html#faceted-chart",
    "title": "R chart basics",
    "section": "Faceted chart",
    "text": "Faceted chart\nFactor variables. Before we continue, we make an important change to the cw dataset by transforming Diet and Time into factor variables. Factors are treated by R as categorical variables instead of continuous variables. It will simplify our coding.\nThe := operator (from data.table) alters variables “in-place”, with no explicit assignment (&lt;-). We revisit the := operator in the R data basics tutorial.\n\n# create factors\ncw[, Diet := factor(Diet)]\ncw[, Time := factor(Time)]\n\n# notice the difference?\nsummary(cw) \n#&gt;      Chick       Diet         Time         weight     \n#&gt;  Min.   : 1.00   1:220   0      : 50   Min.   : 35.0  \n#&gt;  1st Qu.:13.00   2:120   2      : 50   1st Qu.: 63.0  \n#&gt;  Median :26.00   3:120   4      : 49   Median :103.0  \n#&gt;  Mean   :25.75   4:118   6      : 49   Mean   :121.8  \n#&gt;  3rd Qu.:38.00           8      : 49   3rd Qu.:163.8  \n#&gt;  Max.   :50.00           10     : 49   Max.   :373.0  \n#&gt;                          (Other):282\n\nfacet_wrap() function. facet_wrap() is a ggplot2 function that plots variables in separate facets, or panels. In this case, each facet contains one of the four diets.\n\n# create facets by Diet \nggplot(data = cw, mapping = aes(x = Time, y = weight, color = Diet)) +\n  geom_point() +\n  facet_wrap(vars(Diet)) +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n\nExercise 2.4Answer\n\n\n\nTo address “overprinting” (where points print over other points in the same position), replace geom_point() with geom_jitter().\nWhat observations about the data can you make?\n\n\n\n\n\n\n\n\n\n\n\n\n\nJittering allows a much better view of the full data set.\nDiet 4 has the least variability.\nDiet 3 seems to have the highest weights.\nWe can’t really say anything about the mean effect of each diet.\n\n\n\n\n\nExercise 2.5Answer\n\n\nFor the legend.position argument, try using “top”, “left” and “none”. Do we really need a legend for this plot?\n\n\n\n\n\n\n\n\n\n\n\nHere, the legend.position argument is “none”. The diet types are in the panel headers, so a legend is unnecessary."
  },
  {
    "objectID": "chart-basics.html#mean-line-chart",
    "href": "chart-basics.html#mean-line-chart",
    "title": "R chart basics",
    "section": "Mean line chart",
    "text": "Mean line chart\nNext we plot the mean changes over time for each diet using the stat_summary() function. Because we do not have facets this time, we use the default legend.\n\nggplot(data = cw, mapping = aes(x = Time, y = weight, group = Diet, color = Diet)) +\n  stat_summary(fun = \"mean\", geom = \"line\")\n\n\n\n\n\n\n\n\nWe see that diet 3 has the highest mean weight gain by the end of the experiment but we don’t have any information about the variation (uncertainty) in the data.\n\nExercise 2.6Answer\n\n\n\nWhat happens when you add geom_point() to the plot above? Don’t forget the +.\nDoes it make a difference if you put it before or after stat_summary(...)?\nHint: Look carefully at how the graph is plotted.\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe chart is the same either way.\nThe underlying idea in ggplot2 is that a chart is assembled in layers, adding a new layer to previous layers using the + operator."
  },
  {
    "objectID": "chart-basics.html#box-whisker-plot",
    "href": "chart-basics.html#box-whisker-plot",
    "title": "R chart basics",
    "section": "Box & whisker plot",
    "text": "Box & whisker plot\nTo see variation between the different diets we use geom_boxplot() to plot a box & whisker plot. A note of caution—the number of chicks per diet is relatively low to produce this plot.\n\nggplot(data = cw, mapping = aes(x = Time, y = weight, color = Diet)) +\n  facet_wrap(vars(Diet)) +\n  geom_boxplot() +\n  theme(legend.position = \"none\") +\n  ggtitle(\"Changing distributions of chick weight by diet and elapsed time\")\n\n\n\n\n\n\n\n\n\nDiet 3 seems to have the highest “average” weight gain\nDiet 4 seems to have the least amount of variation\n\n\nExercise 2.7Answer\n\n\nTo the plot above, edit the axis labels using xlab() for the x-axis label and ylab() for the y-axis label. The labels should be,\n\nx-axis: “Time (days)”\ny-axis: “Weight (grams)”\n\nHint: Add a plus symbol (+) at the end of the current last line, then add a the x-label layer using the xlab() function. Repeat for the y-label. You can type help(xlab) in the Console to view its help page."
  },
  {
    "objectID": "chart-basics.html#scatterplot-with-mean-line",
    "href": "chart-basics.html#scatterplot-with-mean-line",
    "title": "R chart basics",
    "section": "Scatterplot with mean line",
    "text": "Scatterplot with mean line\nLet’s finish with a plot that you might include in a publication\n\nggplot(data = cw, mapping = aes(x = Time, y = weight, group = Diet, color = Diet)) +\n  facet_wrap(vars(Diet)) +\n  stat_summary(fun = \"mean\", geom = \"line\", colour= \"black\") +\n  geom_jitter() +\n  theme(legend.position = \"none\") +\n  ggtitle(\"Chick weight by diet and elapsed time\") +\n  xlab(\"Time (days)\") +\n  ylab(\"Weight (grams)\")\n\n\n\n\n\n\n\n\nNote that I printed the line layer first then printed the points over them to let the data be prominent.\n\nExercise 2.8Answer\n\n\n\nRead the help page for the facet_wrap() function\nSee if you can edit the code slightly to make the facets print out row-wise, as in 1 row and 4 columns of charts.\n\nWhat visual advantages does this arrangement provide?\nWhat visual disadvantages?"
  },
  {
    "objectID": "agenda.html",
    "href": "agenda.html",
    "title": "Program",
    "section": "",
    "text": "Image: Today’s Agenda by Rajiv Patel is licensed under CC BY-NC 2.0",
    "crumbs": [
      "Program"
    ]
  },
  {
    "objectID": "agenda.html#pre-workshop",
    "href": "agenda.html#pre-workshop",
    "title": "Program",
    "section": "Pre-workshop",
    "text": "Pre-workshop\nPre-workshop tutorials\nIf you are new to R (or new to the ggplot2 or data.table packages), we recommend you complete the three introductory tutorials listed below. Completing these tutorials before attending the Institute will make your time with us that much more productive.\n\nR basics\n\nR chart basics\nR data basics\n\nEach tutorial can be completed in under an hour if you have any experience with procedural programming languages such as MATLAB, R, or Python. Programming novices might need more than an hour each.",
    "crumbs": [
      "Program"
    ]
  },
  {
    "objectID": "agenda.html#tuesday-june-11",
    "href": "agenda.html#tuesday-june-11",
    "title": "Program",
    "section": "Tuesday, June 11",
    "text": "Tuesday, June 11\nLink TBD Join the online office hours\nOffice hours\n1:00–5:00 pm Eastern Time. We are available for answering questions and resolving problems you encounter installing R or working with R in the three pre-workshop tutorials.",
    "crumbs": [
      "Program"
    ]
  },
  {
    "objectID": "agenda.html#wednesday-june-12",
    "href": "agenda.html#wednesday-june-12",
    "title": "Program",
    "section": "Wednesday, June 12",
    "text": "Wednesday, June 12\nLink TBD Join the online meeting\nIntroductions\n1:00–1:50 Eastern Time\nIntroduce facilitators and participants, objectives, and MIDFIELD.\nBreak\n1:50–2:00\nExploring data structure\n2:00–3:00\nExploring data excerpts manually.\n\nStudent 3 data example\nStudent 4 data example\n\nCIP website NCES Classification of Instructional Programs (CIP)\n\nGuided practice.\n3:00–5:00\nSelf-paced case study using midfieldr and midfielddata. Real-time help.\n\nCase study: Goals A short reading.\n\nCase study: Data A midfieldr tutorial.\n\nWrap-up\nbefore 5:00\nPlease check in with us before leaving the virtual meeting.\nHomework\n\nComplete the guided practice “Data” tutorial.\nFor our think-share activities in tomorrow’s data visualization session, consider printing a hard-copy of the worksheet. (Download link in tomorrow’s program below.)\n\nOptional resources\n\nTopics from today’s guided practice are developed in greater detail in midfieldr package vignettes [link].",
    "crumbs": [
      "Program"
    ]
  },
  {
    "objectID": "agenda.html#thursday-june-13",
    "href": "agenda.html#thursday-june-13",
    "title": "Program",
    "section": "Thursday, June 13",
    "text": "Thursday, June 13\nLink TBD Join the online meeting\nMetaphors and metrics\n1:00–1:30 Eastern Time\nPipelines, pathways, and ecosystems.\nBreak\n1:30–1:40\nGuided practice\n1:40–2:30\nCase study: Results Continue the case study.\nData visualization session 1\n 2:30–3:20\nA hard-copy printout of the worksheet is recommended for our think-share activities. We demonstrate the perceptual limitations of common graph types and suggest more effective alternatives. Our goals in visual rhetoric are\n\nImproving perception of stories in the data\nFacilitating quantitative reasoning about the data\nEnhancing credibility of evidence supporting an argument\n\nBreak\n3:20–3:30\nA practice research question\n3:30–5:00\nWe partially define a practice research question to be examined using midfieldr and midfielddata. Working in small groups and given a specific metric, choose programs and student blocs and develop the appropriate data and chart(s) to explore possible stories in your data. Report out your progress by the end of the day.\nResources\n\ndata dictionaries: student practice data / research data\n\ndata dictionaries: term practice data / research data\n\ndata dictionaries: course practice data / research data\n\ndata dictionaries: degree practice data / research data\n\nWrap-up.\nbefore 5:00\nPlease check in with us before leaving the virtual meeting.\nHomework\n\nComplete the guided practice “Results” tutorial.\nComplete the practice research question to your satisfaction.\nList 2 or 3 research questions you would like to work on during the final day of the workshop.\nFor our think-share activities in tomorrow’s data visualization session, consider printing a hard-copy of the worksheet. (Download link in tomorrow’s program below.)\n\nOptional resources\n\nTopics from today’s guided practice are developed in greater detail in midfieldr package vignettes [link].\nDeveloping the migration yield metric.  slides An optional supplement to the metaphors and metrics session that outlines the iterative process between the logic of an argument and the logic of a chart that led us to develop the migration yield metric.",
    "crumbs": [
      "Program"
    ]
  },
  {
    "objectID": "agenda.html#friday-june-14",
    "href": "agenda.html#friday-june-14",
    "title": "Program",
    "section": "Friday, June 14",
    "text": "Friday, June 14\nLink TBD Join the online meeting\nData visualization session 2\n 1:00–2:00 Eastern Time\nA hard-copy printout of the worksheet is recommended for our think-share activities. We illustrate a repertoire of chart types and how they are suited to specific data structures and answering specific types of questions.\nWork on your research question\n 2:00–3:30\nSmall-group work. Consult with us on your progress, discussion\nResources\n\ndata dictionaries: student practice data / research data\n\ndata dictionaries: term practice data / research data\n\ndata dictionaries: course practice data / research data\n\ndata dictionaries: degree practice data / research data\n\nProgress report\n3:30–4:30\nShare with the group.\nWrap up\n 4:40–4:45",
    "crumbs": [
      "Program"
    ]
  },
  {
    "objectID": "before-you-arrive.html",
    "href": "before-you-arrive.html",
    "title": "Before you arrive",
    "section": "",
    "text": "Image: Data Visualization and R Bookshelf by Richard Layton.\nTo get the most out of the workshop, you should have the essential software installed and running on your computer several days before the workshop to give you time to contact us with questions if anything goes amiss.\nIf you are trying R for the first time, it is vital that you attempt to set up your computer with the necessary software in advance or it will be difficult to keep up.\nAs you work your way through this pre-workshop assignment, you will encounter R code chunks to type. Clicking the Copy to Clipboard icon  in the top right corner of the code chunk copies the code to your clipboard, saving some typing time. For example:\n# sample code chunk\nx &lt;- 10",
    "crumbs": [
      "Before you arrive"
    ]
  },
  {
    "objectID": "before-you-arrive.html#already-use-r",
    "href": "before-you-arrive.html#already-use-r",
    "title": "Before you arrive",
    "section": "Already use R?",
    "text": "Already use R?\nIf you are already an R and RStudio integrated development environment (IDE) user, this is a great time to check for updates.\nUpdating RStudio\n\nRStudio menu Help &gt; Check for Updates will tell you if you are current or not.\nTo update, close RStudio on your machine, download the new version from Posit).\n\nUpdate your packages\nHow to upgrade all out-of-date packages in What They Forgot to Teach You About R by Jennifer Bryan and Jim Hester.\nUpdating R\nThe easiest way to update R is to simply download the newest version. RStudio will automatically use the latest you’ve installed.\nAlternatively, Windows users can use the installr package:\n\nInstall the installr package\nIf open, close R and RStudio\nNavigate to your most recent Rgui.exe file located in your Programs directory, e.g., C:\\Program Files\\R\\R-4.0.0\\bin\\x64\\Rgui.exe\n\nRight-click on Rgui.exe and run as administrator\nIn the R GUI window that appears, run the commands\n\n    # Windows users only\n    library(\"installr\")\n    updateR()\nUpdating your R library\nHow to transfer your library when updating R also by Bryan and Hester. Requires the fs package.",
    "crumbs": [
      "Before you arrive"
    ]
  },
  {
    "objectID": "before-you-arrive.html#new-to-r",
    "href": "before-you-arrive.html#new-to-r",
    "title": "Before you arrive",
    "section": "New to R?",
    "text": "New to R?\nThis section is for anyone who has not yet installed R or RStudio.\nThe first steps are to install R and RStudio. Both R and RStudio are free. Windows users may have to login as an Administrator before installing the software.\n\nInstall R and RStudio from the “Posit” website. Alternatively, you can download R directly from the R website.\n\nOnce the installation is complete, you can take a 2-minute tour of the RStudio interface.\n\nLet’s start (00:57–02:32) by R Ladies Sydney (Richmond, 2018)\n\nThe same video includes a longer (7 minute) tour of the four quadrants (panes) in RStudio if you are interested.\n\nThe RStudio quadrants (07:21–14:40) by R Ladies Sydney (Richmond, 2018)",
    "crumbs": [
      "Before you arrive"
    ]
  },
  {
    "objectID": "before-you-arrive.html#start-the-setup",
    "href": "before-you-arrive.html#start-the-setup",
    "title": "Before you arrive",
    "section": "Start the setup",
    "text": "Start the setup\nOnce you have R and RStudio up and running on your system, we have a short set of setup instructions to help prepare you for the workshop R tutorials.\nWe start by creating an RStudio Project file and directory. You can recognize an R project file by its .Rproj suffix.\nIf you prefer your instructions with commentary,\n\nStart with a Project (02:34–04:50) by R Ladies Sydney (Richmond, 2018)\n\nIf you prefer basic written instructions,\n\nRStudio, File &gt; New Project… &gt; New Directory &gt; New Project\nOr, click the New Project button in the Console ribbon,\n\n\nIn the dialog box that appears,\n\nType the workshop name as the directory name, for example, midfield-institute-2024\n\nUse the browse button to select a location on your computer to create the project folder\n\nClick the Create Project button\n\nWhenever you work with the workshop materials, launch the midfield-institute-2024.Rproj file to start the session.",
    "crumbs": [
      "Before you arrive"
    ]
  },
  {
    "objectID": "before-you-arrive.html#add-some-folders",
    "href": "before-you-arrive.html#add-some-folders",
    "title": "Before you arrive",
    "section": "Add some folders",
    "text": "Add some folders\nWhile file organization is a matter of personal preference, we ask that you use the directory structure shown here for your work in the workshop. Assuming we called our project midfield-institute-2024, the minimal directory structure has three folders in it plus the .Rproj file at the top level.\nmidfield-institute-2024\\\n    data\\\n    results\\\n    scripts\\\n    midfield-institute-2024.Rproj\nWe use the folders as follows:\n\ndata data files\nresults finished graphs and tabulated data formatted for display\n\nscripts R scripts that operate on data to produce results\n\nTo create folders:\n\nuse your usual method of creating new folders on your machine\nor you can use the New Folder button in the Files pane\n\n\nFor a video guide,\n\nMake some folders (04:50–06:08) by R Ladies Sydney (Richmond, 2018)",
    "crumbs": [
      "Before you arrive"
    ]
  },
  {
    "objectID": "before-you-arrive.html#install-cran-packages",
    "href": "before-you-arrive.html#install-cran-packages",
    "title": "Before you arrive",
    "section": "Install CRAN packages",
    "text": "Install CRAN packages\nThe fundamental unit of shareable code in R is the package. For the R novice, an R package is like an “app” for R—a collection of functions, data, and documentation for doing work in R that is easily shared with others (Wickham, 2014).\nMost packages are obtained from the CRAN website (The Comprehensive R Archive Network, 2018-04-22). To install a CRAN package using RStudio:\n\nLaunch RStudio\n\nThe RStudio interface has several panes. We want the Files/Plots/Packages pane.\n\nSelect the Packages tab\n\n\nNext,\n\nClick Install on the ribbon\nIn the dialog box, type the name of the package. For our first package, type data.table to install the data.table package (Dowle & Srinivasan, 2021)\nCheck the Install dependencies box\nClick the Install button\n\n\nDuring the installation, Windows users might get a warning message about Rtools, something like:\nWARNING: Rtools is required to build R packages but is not currently installed. Please download etc.\n\nRtools is needed for packages with C/C++/FORTRAN code from source—which does not apply to us. You may ignore the warning and carry on.\nIn the RStudio Console, you should see a message like this one,\npackage 'data.table' successfully unpacked and MD5 sums checked\nIf successful, the package will appear in the Packages pane, e.g.,\n\nRepeat the process for the following packages:\ncheckmate\nggplot2\nwrapr\ncurl\nAlternatively, you can install them all at once by typing in the Console:\npackages_we_use &lt;- c(\"data.table\", \"ggplot2\", \"checkmate\", \"wrapr\", \"curl\")\ninstall.packages(packages_we_use)",
    "crumbs": [
      "Before you arrive"
    ]
  },
  {
    "objectID": "before-you-arrive.html#install-midfieldr",
    "href": "before-you-arrive.html#install-midfieldr",
    "title": "Before you arrive",
    "section": "Install midfieldr",
    "text": "Install midfieldr\nInstall with:\n# type in the RStudio Console \ninstall.packages(\"midfieldr\")\n\n\n\n\n\n\nTip\n\n\n\nIf you get an error message like the one below, it means that the packages in the dependencies list have not been installed.\n\nThe remedy is to install any packages listed in the error message and then install midfieldr again.\n\n\nOnce midfieldr is successfully installed, you can confirm the installation by running the following lines to bring up the package help page in the Help window.\n# type in the RStudio Console \nlibrary(\"midfieldr\")\n? \"midfieldr-package\"\n\n# or, equivalently\nhelp(\"midfieldr-package\")\nIf the installation is successful, the code chunk above should produce a view of the help page as shown here.",
    "crumbs": [
      "Before you arrive"
    ]
  },
  {
    "objectID": "before-you-arrive.html#install-midfielddata",
    "href": "before-you-arrive.html#install-midfielddata",
    "title": "Before you arrive",
    "section": "Install midfielddata",
    "text": "Install midfielddata\nBecause of its size, the data package is stored in a drat repository instead of CRAN. Installation takes time; please be patient and wait for the Console prompt “&gt;” to reappear.\nType (or copy and paste) the following lines in the RStudio Console.\n# type in the RStudio Console  \ninstall.packages(\"midfielddata\", \n                 repos = \"https://MIDFIELDR.github.io/drat/\", \n                 type = \"source\")\n# be patient\nOnce the Console prompt “&gt;” reappears, you can confirm a successful installation by viewing the package help page. In the Console, run:\n# type in the RStudio Console  \nlibrary(\"midfielddata\")\nhelp(\"midfielddata-package\")\nIf the installation is successful, the code chunk above should produce a view of the help page as shown here.",
    "crumbs": [
      "Before you arrive"
    ]
  },
  {
    "objectID": "before-you-arrive.html#finish-the-setup",
    "href": "before-you-arrive.html#finish-the-setup",
    "title": "Before you arrive",
    "section": "Finish the setup",
    "text": "Finish the setup\nAs a final task, save your open files and close RStudio.\nIf you get a prompt about saving your workspace image, the answer is No. \nYou can turn this prompt off by reopening RStudio and use the pulldown menu:\n\nTools &gt; Global Options…\nIn the dialog box, Save workspace to .RData on exit: Select “Never”",
    "crumbs": [
      "Before you arrive"
    ]
  },
  {
    "objectID": "before-you-arrive.html#homework",
    "href": "before-you-arrive.html#homework",
    "title": "Before you arrive",
    "section": "Homework",
    "text": "Homework\nIf you are new to R (or new to the ggplot2 or data.table packages), we recommend you complete the three pre-workshop tutorials for an introduction to R including manipulatings data and creating charts.\nCompleting these tutorials before attending the Institute will make your time with us that much more productive.",
    "crumbs": [
      "Before you arrive"
    ]
  },
  {
    "objectID": "data-basics.html",
    "href": "data-basics.html",
    "title": "R data basics",
    "section": "",
    "text": "Image: US Route 60 Large Array by Mobilus In Mobili is licensed under CC BY-SA 2.0\nUsing data.table to manipulate data in R.\nLicense. This material is adapted from Getting started in R: Tinyverse edition by Bashir and Eddelbuettel (2018) which was licensed under CC BY-SA by ilustat. This adaptation and extension, R data basics by Richard Layton, is licensed under CC BY-SA 2.0."
  },
  {
    "objectID": "data-basics.html#preface",
    "href": "data-basics.html#preface",
    "title": "R data basics",
    "section": "Preface",
    "text": "Preface\nMIDFIELD data are curated, that is, organized and integrated from multiple institutions, maintained over time, and available for reuse and preservation. Yet to address any specific research question, the data must be wrangled into a shape useful for analysis.\n\nThe basic concept of data wrangling is to visualize your data being structured to make your task easier, and then take the steps to add this structure to your data (Zumel & Mount, 2020, p. 113.).\n\nThis tutorial covers basic operations for data shaping with the goal of obtaining a simple “data matrix” where each row is an observation and each column is a measurement type.\nUsing data.table. The rationale for manipulating data using the data.table package instead of base R or the dplyr package include speed, memory efficiency, and concise transforms via the []-indexing operator (e.g., the “by” grouping notation).\nTo mitigate the extra cognitive load for new R users of learning data.table syntax while also learning R, I use a “no-frills” approach as much as possible.\nConceptually, data.table operations can be viewed as\n    dt[i, j, by]\nwith some intentional similarity to SQL. Here i operates on rows, j operates on columns, and by is the grouping operator.\nBefore starting. Our tutorials assume that you\n\nHave completed the Before you arrive instructions\nHave completed the R basics guide\nHave completed the R chart basics guide\nStart your R session by launching the RStudio project you created, e.g., midfield-institute-2023.Rproj\n\nIf you are in an RStudio project, the project name appears in the upper left corner of the RStudio window. Your project directory (folder) should look something like this:\nmidfield-institute-2023\\\n    data\\\n    results\\\n    scripts\\\n    midfield-institute-2023.Rproj"
  },
  {
    "objectID": "data-basics.html#getting-started",
    "href": "data-basics.html#getting-started",
    "title": "R data basics",
    "section": "Getting started",
    "text": "Getting started\nStart a new script. I recommend that you start a new script for this segment.\n\nUse File &gt; New File &gt; R Script to create a new R script\nFile &gt; Save As… to name the file (we suggest 03-data-basics.R), then save it to the scripts directory\nAt the top of the script, add a minimal header, something like:\n\n\n# R data basics\n# your name  \n# date \n\n\nUse library() to load packages used in the script.\n\n\n# silently load packages\nsuppressPackageStartupMessages(library(\"data.table\"))\n\n# set data.table printout options\noptions(\n  datatable.print.nrows = 20,\n  datatable.print.topn = 5,\n  datatable.print.class = TRUE\n)\n\nReminder: In a code chunk like the one above, you can click on the “Copy to clipboard” icon in the upper right corner to enable quick copy and paste from this document to your script.\nUse your script throughout the tutorial. When a new chunk of code is given,\n\nCopy the line(s) of code into your script, save, and run.\n\nCheck your result by comparing it to the result in the tutorial.\nCheck what you’ve learned using the Your turn exercises."
  },
  {
    "objectID": "data-basics.html#import-data",
    "href": "data-basics.html#import-data",
    "title": "R data basics",
    "section": "Import data",
    "text": "Import data\nRead the same data file we used in the previous tutorial. The data set is in block-record (or “data matrix”) form, that is, variables are columns and observations are rows.\n\n# import data\ncw &lt;- fread(\"data/chick_weight.csv\")\n\n# view\ncw\n#&gt;      Chick  Diet  Time weight\n#&gt;      &lt;int&gt; &lt;int&gt; &lt;int&gt;  &lt;int&gt;\n#&gt;   1:    18     1     0     39\n#&gt;   2:    18     1     2     35\n#&gt;   3:    16     1     0     41\n#&gt;   4:    16     1     2     45\n#&gt;   5:    16     1     4     49\n#&gt;  ---                         \n#&gt; 574:    48     4    14    170\n#&gt; 575:    48     4    16    222\n#&gt; 576:    48     4    18    261\n#&gt; 577:    48     4    20    303\n#&gt; 578:    48     4    21    322"
  },
  {
    "objectID": "data-basics.html#changes-in-place",
    "href": "data-basics.html#changes-in-place",
    "title": "R data basics",
    "section": "Changes in place",
    "text": "Changes in place\nRename variables. Edit column names “in place.”\nBy in place we mean that the change is made using data.table reference semantics (or by reference) in which changes are made without assigning the result back to a name, that is, we write\n    setnames(cw, old, new)\nnot\n    cw &lt;- setnames(cw, old, new)\nFor example, changing the variable names in the cw data frame,\n\n# change column names in place\nsetnames(cw, \n         old = c(\"Chick\", \"Diet\", \"Time\", \"weight\"), \n         new = c(\"chick_id\", \"group\", \"day\", \"weight_g\"))\n\ncw\n#&gt;      chick_id group   day weight_g\n#&gt;         &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;\n#&gt;   1:       18     1     0       39\n#&gt;   2:       18     1     2       35\n#&gt;   3:       16     1     0       41\n#&gt;   4:       16     1     2       45\n#&gt;   5:       16     1     4       49\n#&gt;  ---                              \n#&gt; 574:       48     4    14      170\n#&gt; 575:       48     4    16      222\n#&gt; 576:       48     4    18      261\n#&gt; 577:       48     4    20      303\n#&gt; 578:       48     4    21      322\n\nThere’s much more to reference semantics than dropping the assignment operator—it’s really about speed and memory efficiency with large data sets. However, for our “basics” series, you need to recall only that the := operator and all data.table functions with names starting with set work by reference.\n\nExercise 3.1Answer\n\n\n\nCreate a copy of cw using x &lt;- copy(cw)\nIn x, rename the ID variable to ID.\n\n\n\n\nx &lt;- copy(cw)\nsetnames(x, old = c(\"chick_id\"), new = c(\"ID\"))\nx\n#&gt;         ID group   day weight_g\n#&gt;      &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;\n#&gt;   1:    18     1     0       39\n#&gt;   2:    18     1     2       35\n#&gt;   3:    16     1     0       41\n#&gt;   4:    16     1     2       45\n#&gt;   5:    16     1     4       49\n#&gt;  ---                           \n#&gt; 574:    48     4    14      170\n#&gt; 575:    48     4    16      222\n#&gt; 576:    48     4    18      261\n#&gt; 577:    48     4    20      303\n#&gt; 578:    48     4    21      322\n\n\n\n\nReorder variables. Another example of an operation in-place. The columns listed are moved to the left-hand side of the data frame and other columns appear to the right in their original order. Here we move dayand group to the first two column positions.\n\n# reorder column positions in place\nsetcolorder(cw, c(\"day\", \"group\"))\n\n# view\ncw\n#&gt;        day group chick_id weight_g\n#&gt;      &lt;int&gt; &lt;int&gt;    &lt;int&gt;    &lt;int&gt;\n#&gt;   1:     0     1       18       39\n#&gt;   2:     2     1       18       35\n#&gt;   3:     0     1       16       41\n#&gt;   4:     2     1       16       45\n#&gt;   5:     4     1       16       49\n#&gt;  ---                              \n#&gt; 574:    14     4       48      170\n#&gt; 575:    16     4       48      222\n#&gt; 576:    18     4       48      261\n#&gt; 577:    20     4       48      303\n#&gt; 578:    21     4       48      322\n\nIf you want to make a change without affecting the source data frame, assign a copy of the data frame to a new name with the copy() function. Assignment to a new name is not enough; you have to deliberately use the copy() function.\n\n# create an new object in memory\nx &lt;- copy(cw)\n\n# edit in place\nsetcolorder(x, c(\"group\", \"day\"))\n\n# view\nx\n#&gt;      group   day chick_id weight_g\n#&gt;      &lt;int&gt; &lt;int&gt;    &lt;int&gt;    &lt;int&gt;\n#&gt;   1:     1     0       18       39\n#&gt;   2:     1     2       18       35\n#&gt;   3:     1     0       16       41\n#&gt;   4:     1     2       16       45\n#&gt;   5:     1     4       16       49\n#&gt;  ---                              \n#&gt; 574:     4    14       48      170\n#&gt; 575:     4    16       48      222\n#&gt; 576:     4    18       48      261\n#&gt; 577:     4    20       48      303\n#&gt; 578:     4    21       48      322\n\n# source remains unchanged\ncw\n#&gt;        day group chick_id weight_g\n#&gt;      &lt;int&gt; &lt;int&gt;    &lt;int&gt;    &lt;int&gt;\n#&gt;   1:     0     1       18       39\n#&gt;   2:     2     1       18       35\n#&gt;   3:     0     1       16       41\n#&gt;   4:     2     1       16       45\n#&gt;   5:     4     1       16       49\n#&gt;  ---                              \n#&gt; 574:    14     4       48      170\n#&gt; 575:    16     4       48      222\n#&gt; 576:    18     4       48      261\n#&gt; 577:    20     4       48      303\n#&gt; 578:    21     4       48      322\n\n\nExercise 3.2Answer\n\n\n\nCreate a copy of cw using x &lt;- copy(cw)\nIn x, reorder the columns from left to right ID, group, day, weight.\n\n\n\n\nx &lt;- copy(cw)\nsetcolorder(x, c(\"chick_id\", \"group\", \"day\", \"weight_g\"))\nx\n#&gt;      chick_id group   day weight_g\n#&gt;         &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;\n#&gt;   1:       18     1     0       39\n#&gt;   2:       18     1     2       35\n#&gt;   3:       16     1     0       41\n#&gt;   4:       16     1     2       45\n#&gt;   5:       16     1     4       49\n#&gt;  ---                              \n#&gt; 574:       48     4    14      170\n#&gt; 575:       48     4    16      222\n#&gt; 576:       48     4    18      261\n#&gt; 577:       48     4    20      303\n#&gt; 578:       48     4    21      322"
  },
  {
    "objectID": "data-basics.html#column-operations",
    "href": "data-basics.html#column-operations",
    "title": "R data basics",
    "section": "Column operations",
    "text": "Column operations\nj to transform a variable. Use := to transform column values in place, here, converting an integer to a double-precision number.\n\n# modify values in an existing column\ncw[, weight_g := as.numeric(weight_g)]\n\n# view\ncw\n#&gt;        day group chick_id weight_g\n#&gt;      &lt;int&gt; &lt;int&gt;    &lt;int&gt;    &lt;num&gt;\n#&gt;   1:     0     1       18       39\n#&gt;   2:     2     1       18       35\n#&gt;   3:     0     1       16       41\n#&gt;   4:     2     1       16       45\n#&gt;   5:     4     1       16       49\n#&gt;  ---                              \n#&gt; 574:    14     4       48      170\n#&gt; 575:    16     4       48      222\n#&gt; 576:    18     4       48      261\n#&gt; 577:    20     4       48      303\n#&gt; 578:    21     4       48      322\n\nHere we use paste0() to add a prefix to the group number, converting the variable to a character type at the same time.\n\n# modify values in an existing column\ncw[, group := paste0(\"diet \", group)]\n\n# view\ncw\n#&gt;        day  group chick_id weight_g\n#&gt;      &lt;int&gt; &lt;char&gt;    &lt;int&gt;    &lt;num&gt;\n#&gt;   1:     0 diet 1       18       39\n#&gt;   2:     2 diet 1       18       35\n#&gt;   3:     0 diet 1       16       41\n#&gt;   4:     2 diet 1       16       45\n#&gt;   5:     4 diet 1       16       49\n#&gt;  ---                               \n#&gt; 574:    14 diet 4       48      170\n#&gt; 575:    16 diet 4       48      222\n#&gt; 576:    18 diet 4       48      261\n#&gt; 577:    20 diet 4       48      303\n#&gt; 578:    21 diet 4       48      322\n\n\nExercise 3.3Answer\n\n\n\nCreate a copy of cw using x &lt;- copy(cw)\nIn x, add the prefix “day” to the day number, converting the variable to type character.\n\n\n\n\nx &lt;- copy(cw)\nx[, day := paste0(\"day \", day)]\nx\n#&gt;         day  group chick_id weight_g\n#&gt;      &lt;char&gt; &lt;char&gt;    &lt;int&gt;    &lt;num&gt;\n#&gt;   1:  day 0 diet 1       18       39\n#&gt;   2:  day 2 diet 1       18       35\n#&gt;   3:  day 0 diet 1       16       41\n#&gt;   4:  day 2 diet 1       16       45\n#&gt;   5:  day 4 diet 1       16       49\n#&gt;  ---                                \n#&gt; 574: day 14 diet 4       48      170\n#&gt; 575: day 16 diet 4       48      222\n#&gt; 576: day 18 diet 4       48      261\n#&gt; 577: day 20 diet 4       48      303\n#&gt; 578: day 21 diet 4       48      322\n\n\n\n\nj to select variables. Variables not listed are dropped. Here, for example, we drop the chick_id variable by not listing it.\n\n# select columns \nx &lt;- cw[, .(day, group, weight_g)]\n\n# view\nx\n#&gt;        day  group weight_g\n#&gt;      &lt;int&gt; &lt;char&gt;    &lt;num&gt;\n#&gt;   1:     0 diet 1       39\n#&gt;   2:     2 diet 1       35\n#&gt;   3:     0 diet 1       41\n#&gt;   4:     2 diet 1       45\n#&gt;   5:     4 diet 1       49\n#&gt;  ---                      \n#&gt; 574:    14 diet 4      170\n#&gt; 575:    16 diet 4      222\n#&gt; 576:    18 diet 4      261\n#&gt; 577:    20 diet 4      303\n#&gt; 578:    21 diet 4      322\n\n\nExercise 3.4Answer\n\n\n\nCreate a copy of cw using x &lt;- copy(cw)\nIn x, select all columns except day.\n\n\n\n\nx &lt;- copy(cw)\nx &lt;- x[, .(chick_id, group, weight_g)]\nx\n#&gt;      chick_id  group weight_g\n#&gt;         &lt;int&gt; &lt;char&gt;    &lt;num&gt;\n#&gt;   1:       18 diet 1       39\n#&gt;   2:       18 diet 1       35\n#&gt;   3:       16 diet 1       41\n#&gt;   4:       16 diet 1       45\n#&gt;   5:       16 diet 1       49\n#&gt;  ---                         \n#&gt; 574:       48 diet 4      170\n#&gt; 575:       48 diet 4      222\n#&gt; 576:       48 diet 4      261\n#&gt; 577:       48 diet 4      303\n#&gt; 578:       48 diet 4      322\n\n\n\n\nj to add a variable. The new variable is added to the right of the other columns. Here, for example, we add the weight_kg variable.\n\n# add a column\ncw[, weight_kg := weight_g / 1000]\n\n# view\ncw\n#&gt;        day  group chick_id weight_g weight_kg\n#&gt;      &lt;int&gt; &lt;char&gt;    &lt;int&gt;    &lt;num&gt;     &lt;num&gt;\n#&gt;   1:     0 diet 1       18       39     0.039\n#&gt;   2:     2 diet 1       18       35     0.035\n#&gt;   3:     0 diet 1       16       41     0.041\n#&gt;   4:     2 diet 1       16       45     0.045\n#&gt;   5:     4 diet 1       16       49     0.049\n#&gt;  ---                                         \n#&gt; 574:    14 diet 4       48      170     0.170\n#&gt; 575:    16 diet 4       48      222     0.222\n#&gt; 576:    18 diet 4       48      261     0.261\n#&gt; 577:    20 diet 4       48      303     0.303\n#&gt; 578:    21 diet 4       48      322     0.322\n\n\nExercise 3.5Answer\n\n\n\nCreate a copy of cw using x &lt;- copy(cw)\nIn x, add a weight variable weight_oz in ounces (28.35 grams per ounce). Round the answer to the nearest tenth.\n\n\n\n\nx &lt;- copy(cw)\nx[, weight_oz := round(weight_g / 28.35, 1)]\nx\n#&gt;        day  group chick_id weight_g weight_kg weight_oz\n#&gt;      &lt;int&gt; &lt;char&gt;    &lt;int&gt;    &lt;num&gt;     &lt;num&gt;     &lt;num&gt;\n#&gt;   1:     0 diet 1       18       39     0.039       1.4\n#&gt;   2:     2 diet 1       18       35     0.035       1.2\n#&gt;   3:     0 diet 1       16       41     0.041       1.4\n#&gt;   4:     2 diet 1       16       45     0.045       1.6\n#&gt;   5:     4 diet 1       16       49     0.049       1.7\n#&gt;  ---                                                   \n#&gt; 574:    14 diet 4       48      170     0.170       6.0\n#&gt; 575:    16 diet 4       48      222     0.222       7.8\n#&gt; 576:    18 diet 4       48      261     0.261       9.2\n#&gt; 577:    20 diet 4       48      303     0.303      10.7\n#&gt; 578:    21 diet 4       48      322     0.322      11.4\n\n\n\n\nj to delete a variable. Assigning NULL by reference deletes the variable.\n\n# delete a column\ncw[, weight_kg := NULL]\n\n# view\ncw\n#&gt;        day  group chick_id weight_g\n#&gt;      &lt;int&gt; &lt;char&gt;    &lt;int&gt;    &lt;num&gt;\n#&gt;   1:     0 diet 1       18       39\n#&gt;   2:     2 diet 1       18       35\n#&gt;   3:     0 diet 1       16       41\n#&gt;   4:     2 diet 1       16       45\n#&gt;   5:     4 diet 1       16       49\n#&gt;  ---                               \n#&gt; 574:    14 diet 4       48      170\n#&gt; 575:    16 diet 4       48      222\n#&gt; 576:    18 diet 4       48      261\n#&gt; 577:    20 diet 4       48      303\n#&gt; 578:    21 diet 4       48      322\n\n\nExercise 3.6Answer\n\n\nUsing the x data frame from the previous exercise, delete the weight variables in grams and kilograms.\n\n\n\nx[, weight_g := NULL]\nx[, weight_kg := NULL]\nx\n#&gt;        day  group chick_id weight_oz\n#&gt;      &lt;int&gt; &lt;char&gt;    &lt;int&gt;     &lt;num&gt;\n#&gt;   1:     0 diet 1       18       1.4\n#&gt;   2:     2 diet 1       18       1.2\n#&gt;   3:     0 diet 1       16       1.4\n#&gt;   4:     2 diet 1       16       1.6\n#&gt;   5:     4 diet 1       16       1.7\n#&gt;  ---                                \n#&gt; 574:    14 diet 4       48       6.0\n#&gt; 575:    16 diet 4       48       7.8\n#&gt; 576:    18 diet 4       48       9.2\n#&gt; 577:    20 diet 4       48      10.7\n#&gt; 578:    21 diet 4       48      11.4"
  },
  {
    "objectID": "data-basics.html#row-operations",
    "href": "data-basics.html#row-operations",
    "title": "R data basics",
    "section": "Row operations",
    "text": "Row operations\ni to filter by values. Use relational operators to compare values.\n\n# subset by observation\ny &lt;- cw[day == 21 & weight_g &gt; 300]\n\n# view\ny\n#&gt;      day  group chick_id weight_g\n#&gt;    &lt;int&gt; &lt;char&gt;    &lt;int&gt;    &lt;num&gt;\n#&gt; 1:    21 diet 1        7      305\n#&gt; 2:    21 diet 2       29      309\n#&gt; 3:    21 diet 2       21      331\n#&gt; 4:    21 diet 3       32      305\n#&gt; 5:    21 diet 3       40      321\n#&gt; 6:    21 diet 3       34      341\n#&gt; 7:    21 diet 3       35      373\n#&gt; 8:    21 diet 4       48      322\n\nFor comparing values in vectors use: &lt; (less than), &gt; (greater than), &lt;= (less than or equal to), &gt;= (greater than or equal to), == (equal to), and != (not equal to). These can be combined logically using & (and) and | (or).\n\nExercise 3.7Answer\n\n\n\nCreate a copy of cw using x &lt;- copy(cw)\nFilter x to retain all observations on day 4, diet 3\n\n\n\n\nx &lt;- copy(cw)\nx &lt;- x[day == 4 & group == \"diet 3\"]\nx\n#&gt;       day  group chick_id weight_g\n#&gt;     &lt;int&gt; &lt;char&gt;    &lt;int&gt;    &lt;num&gt;\n#&gt;  1:     4 diet 3       33       63\n#&gt;  2:     4 diet 3       37       56\n#&gt;  3:     4 diet 3       36       61\n#&gt;  4:     4 diet 3       31       62\n#&gt;  5:     4 diet 3       39       61\n#&gt;  6:     4 diet 3       38       61\n#&gt;  7:     4 diet 3       32       65\n#&gt;  8:     4 diet 3       40       66\n#&gt;  9:     4 diet 3       34       63\n#&gt; 10:     4 diet 3       35       64\n\n\n\n\ni to arrange rows.\n\n# order rows by values in columns\ny &lt;- cw[order(weight_g, day)]\n\n# view\ny\n#&gt;        day  group chick_id weight_g\n#&gt;      &lt;int&gt; &lt;char&gt;    &lt;int&gt;    &lt;num&gt;\n#&gt;   1:     2 diet 1       18       35\n#&gt;   2:     0 diet 1       18       39\n#&gt;   3:     0 diet 2       27       39\n#&gt;   4:     0 diet 2       28       39\n#&gt;   5:     0 diet 2       29       39\n#&gt;  ---                               \n#&gt; 574:    21 diet 2       21      331\n#&gt; 575:    18 diet 3       35      332\n#&gt; 576:    21 diet 3       34      341\n#&gt; 577:    20 diet 3       35      361\n#&gt; 578:    21 diet 3       35      373\n\n\nExercise 3.8Answer\n\n\n\nCreate a copy of cw using x &lt;- copy(cw)\nArrange rows of x by group and day\n\n\n\n\nx &lt;- copy(cw)\nx &lt;- x[order(group, day)]\nx\n#&gt;        day  group chick_id weight_g\n#&gt;      &lt;int&gt; &lt;char&gt;    &lt;int&gt;    &lt;num&gt;\n#&gt;   1:     0 diet 1       18       39\n#&gt;   2:     0 diet 1       16       41\n#&gt;   3:     0 diet 1       15       41\n#&gt;   4:     0 diet 1       13       41\n#&gt;   5:     0 diet 1        9       42\n#&gt;  ---                               \n#&gt; 574:    21 diet 4       49      237\n#&gt; 575:    21 diet 4       46      238\n#&gt; 576:    21 diet 4       50      264\n#&gt; 577:    21 diet 4       42      281\n#&gt; 578:    21 diet 4       48      322\n\n\n\n\ni to filter by index.\n\n# subset by position\ny &lt;- cw[1:10]\n\n# view\ny\n#&gt;       day  group chick_id weight_g\n#&gt;     &lt;int&gt; &lt;char&gt;    &lt;int&gt;    &lt;num&gt;\n#&gt;  1:     0 diet 1       18       39\n#&gt;  2:     2 diet 1       18       35\n#&gt;  3:     0 diet 1       16       41\n#&gt;  4:     2 diet 1       16       45\n#&gt;  5:     4 diet 1       16       49\n#&gt;  6:     6 diet 1       16       51\n#&gt;  7:     8 diet 1       16       57\n#&gt;  8:    10 diet 1       16       51\n#&gt;  9:    12 diet 1       16       54\n#&gt; 10:     0 diet 1       15       41\n\n\nExercise 3.9Answer\n\n\nUsing the x data frame from the previous exercise, filter to retain the last 10 rows.\n\n\n\nx &lt;- x[569:578]\nx\n#&gt;       day  group chick_id weight_g\n#&gt;     &lt;int&gt; &lt;char&gt;    &lt;int&gt;    &lt;num&gt;\n#&gt;  1:    20 diet 4       48      303\n#&gt;  2:    21 diet 4       45      196\n#&gt;  3:    21 diet 4       43      200\n#&gt;  4:    21 diet 4       41      204\n#&gt;  5:    21 diet 4       47      205\n#&gt;  6:    21 diet 4       49      237\n#&gt;  7:    21 diet 4       46      238\n#&gt;  8:    21 diet 4       50      264\n#&gt;  9:    21 diet 4       42      281\n#&gt; 10:    21 diet 4       48      322"
  },
  {
    "objectID": "data-basics.html#group-and-summarize",
    "href": "data-basics.html#group-and-summarize",
    "title": "R data basics",
    "section": "Group and summarize",
    "text": "Group and summarize\nby to count. .N is a data.table function that yields the number of observations (rows) in a group identified with the by argument.\n\n# count number of chicks by diet group\ny &lt;- cw[, .(N_chicks = .N), by = c(\"group\")]\n\n# view\ny\n#&gt;     group N_chicks\n#&gt;    &lt;char&gt;    &lt;int&gt;\n#&gt; 1: diet 1      220\n#&gt; 2: diet 2      120\n#&gt; 3: diet 3      120\n#&gt; 4: diet 4      118\n\n\nExercise 3.10Answer\n\n\n\nCreate a copy of cw using x &lt;- copy(cw)\nCount the number of observations by day. Name the variable count\n\n\n\n\nx &lt;- copy(cw)\nx &lt;- x[, .(count = .N), by = c(\"day\")]\nx\n#&gt;       day count\n#&gt;     &lt;int&gt; &lt;int&gt;\n#&gt;  1:     0    50\n#&gt;  2:     2    50\n#&gt;  3:     4    49\n#&gt;  4:     6    49\n#&gt;  5:     8    49\n#&gt;  6:    10    49\n#&gt;  7:    12    49\n#&gt;  8:    14    48\n#&gt;  9:    16    47\n#&gt; 10:    18    47\n#&gt; 11:    20    46\n#&gt; 12:    21    45\n\n\n\n\nby to summarize. Yields three new variables for count, mean, and standard deviation by the two grouping variables group and day.\n\n# compute summary statistics grouped by two variables\ny &lt;- cw[,                                         # i (empty)\n        .(N_chicks = .N,                          # j\n          mean_wt_g = round(mean(weight_g), 1),   # j (cont.)\n          std_dev_wt_g = round(sd(weight_g), 1)), # j (cont.)\n        by = c(\"group\", \"day\")]                   # by\n\n# view\ny\n#&gt;      group   day N_chicks mean_wt_g std_dev_wt_g\n#&gt;     &lt;char&gt; &lt;int&gt;    &lt;int&gt;     &lt;num&gt;        &lt;num&gt;\n#&gt;  1: diet 1     0       20      41.4          1.0\n#&gt;  2: diet 1     2       20      47.2          4.3\n#&gt;  3: diet 1     4       19      56.5          4.1\n#&gt;  4: diet 1     6       19      66.8          7.8\n#&gt;  5: diet 1     8       19      79.7         13.8\n#&gt; ---                                             \n#&gt; 44: diet 4    14       10     161.8         15.7\n#&gt; 45: diet 4    16       10     182.0         25.3\n#&gt; 46: diet 4    18       10     202.9         33.6\n#&gt; 47: diet 4    20        9     233.9         37.6\n#&gt; 48: diet 4    21        9     238.6         43.3\n\n\nExercise 3.11Answer\n\n\n\nCreate a copy of cw using x &lt;- copy(cw)\nCount the number of chicks in x by group and day. Name the variable count\n\n\n\n\nx &lt;- copy(cw)\nx &lt;- x[, .(count = .N), by = c(\"group\", \"day\")]\nx\n#&gt;      group   day count\n#&gt;     &lt;char&gt; &lt;int&gt; &lt;int&gt;\n#&gt;  1: diet 1     0    20\n#&gt;  2: diet 1     2    20\n#&gt;  3: diet 1     4    19\n#&gt;  4: diet 1     6    19\n#&gt;  5: diet 1     8    19\n#&gt; ---                   \n#&gt; 44: diet 4    14    10\n#&gt; 45: diet 4    16    10\n#&gt; 46: diet 4    18    10\n#&gt; 47: diet 4    20     9\n#&gt; 48: diet 4    21     9"
  },
  {
    "objectID": "data-basics.html#combine-operations",
    "href": "data-basics.html#combine-operations",
    "title": "R data basics",
    "section": "Combine operations",
    "text": "Combine operations\n[i, j, by] in combination. In this example, we use i to filter for two specific days, j to create new summary variables grouped by variables group and day. The results are the count N plus weight statistics: mean, standard deviation, median, minimum, and maximum.\n\n# grouped summaries of specific observations\ncw_stats &lt;- cw[day %in% c(0, 21),                         # i\n               .(N = .N,                                  # j\n                 mean_wt_g    = round(mean(weight_g), 0), # j (cont.)\n                 std_dev_wt_g = round(sd(weight_g), 1),   # j (cont.)\n                 median_wt_g  = median(weight_g),         # j (cont.)\n                 min_wt_g     = min(weight_g),            # j (cont.)\n                 max_wt_g     = max(weight_g)),           # j (cont.)\n               by = .(group, day)]                        # by\n\n# view\ncw_stats\n#&gt;     group   day     N mean_wt_g std_dev_wt_g median_wt_g min_wt_g max_wt_g\n#&gt;    &lt;char&gt; &lt;int&gt; &lt;int&gt;     &lt;num&gt;        &lt;num&gt;       &lt;num&gt;    &lt;num&gt;    &lt;num&gt;\n#&gt; 1: diet 1     0    20        41          1.0        41.0       39       43\n#&gt; 2: diet 1    21    16       178         58.7       166.0       96      305\n#&gt; 3: diet 2     0    10        41          1.5        40.5       39       43\n#&gt; 4: diet 2    21    10       215         78.1       212.5       74      331\n#&gt; 5: diet 3     0    10        41          1.0        41.0       39       42\n#&gt; 6: diet 3    21    10       270         71.6       281.0      147      373\n#&gt; 7: diet 4     0    10        41          1.1        41.0       39       42\n#&gt; 8: diet 4    21     9       239         43.3       237.0      196      322"
  },
  {
    "objectID": "data-basics.html#create-a-table",
    "href": "data-basics.html#create-a-table",
    "title": "R data basics",
    "section": "Create a table",
    "text": "Create a table\nFinally, we can make the summaries “prettier” for a possible report or publication where we format the numeric values as text and edit the column names for readability just before printing.\n\n# combine mean and std dev into a single character column\ncw_stats[, mean_sd := paste0(mean_wt_g, \" (\", std_dev_wt_g, \")\")]\n\n# combine min and max into a range column\ncw_stats[, range := paste0(min_wt_g, \"--\", max_wt_g)]\n\n# retain specific columns\ncw_stats &lt;- cw_stats[ , .(group, day, N, mean_sd, median_wt_g, range)]\n\n# order the rows\ncw_stats &lt;- cw_stats[order(group, day)]\n\n# edit the column names for readability \nsetnames(cw_stats,\n         old = c(\"group\", \"day\", \"median_wt_g\",\"mean_sd\", \"range\"),\n         new = c(\"Group\", \"Day\", \"Median\", \"Mean [SD]\", \"Range\"))\n\n# view\ncw_stats\n#&gt;     Group   Day     N  Mean [SD] Median    Range\n#&gt;    &lt;char&gt; &lt;int&gt; &lt;int&gt;     &lt;char&gt;  &lt;num&gt;   &lt;char&gt;\n#&gt; 1: diet 1     0    20     41 (1)   41.0   39--43\n#&gt; 2: diet 1    21    16 178 (58.7)  166.0  96--305\n#&gt; 3: diet 2     0    10   41 (1.5)   40.5   39--43\n#&gt; 4: diet 2    21    10 215 (78.1)  212.5  74--331\n#&gt; 5: diet 3     0    10     41 (1)   41.0   39--42\n#&gt; 6: diet 3    21    10 270 (71.6)  281.0 147--373\n#&gt; 7: diet 4     0    10   41 (1.1)   41.0   39--42\n#&gt; 8: diet 4    21     9 239 (43.3)  237.0 196--322\n\nEventually you should be able to produce a publication-ready version such as the following table, using Rmarkdown and the knitr package. Full details are available in other sources.\n\n\n\nTable 1. Chick weight summary statistics (grams).\n\n\nGroup\nDay\nN\nMean [SD]\nMedian\nRange\n\n\n\n\ndiet 1\n0\n20\n41 (1)\n41.0\n39–43\n\n\ndiet 1\n21\n16\n178 (58.7)\n166.0\n96–305\n\n\ndiet 2\n0\n10\n41 (1.5)\n40.5\n39–43\n\n\ndiet 2\n21\n10\n215 (78.1)\n212.5\n74–331\n\n\ndiet 3\n0\n10\n41 (1)\n41.0\n39–42\n\n\ndiet 3\n21\n10\n270 (71.6)\n281.0\n147–373\n\n\ndiet 4\n0\n10\n41 (1.1)\n41.0\n39–42\n\n\ndiet 4\n21\n9\n239 (43.3)\n237.0\n196–322\n\n\n\n\n\nInterpretation. This summary table offers similar results to those revealed in the charts,\n\nin day 21, diet 3 has the highest mean and median weights\nin day 21, diet 4 has the least variability in weight\n\nIn addition, we note that by day 21, diet 1 lost 4 chicks of 20 that started and diet 4 lost 1 of 10. This could be a sign of unsafe conditions."
  },
  {
    "objectID": "data-basics.html#conclusion",
    "href": "data-basics.html#conclusion",
    "title": "R data basics",
    "section": "Conclusion",
    "text": "Conclusion\nThe R basics, R chart basics, and R data basics guides introduced you to some of the basic concepts for using R and the data.table and ggplot2 packages to manipulate data and create charts. It is only an introduction to what R can do but hopefully you have seen some of the potential of using R for data science.\nNext steps. There are plenty of R courses, books, and online resources that you can learn from. Find things that work for you and don’t be afraid to make mistakes or ask questions.\nDuring the MIDFIELD workshops, you will build on what you’ve learned here, and use the midfieldr package to study student unit records. You can preview that material on the midfieldr website."
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "Image: A Cautious Introduction by Carol Blyberg is licensed under CC BY-NC 2.0\nThe MIDFIELD Institute is a hands-on workshop that helps participants explore using the Multiple-Institution Database for Investigating Longitudinal Development (MIDFIELD). The Institute is an all-virtual meeting over several days.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "introduction.html#about-midfield",
    "href": "introduction.html#about-midfield",
    "title": "Introduction",
    "section": "About MIDFIELD",
    "text": "About MIDFIELD\nMIDFIELD is a partnership of higher education institutions with engineering programs. Begun in 2004 as an extension of the SUCCEED Longitudinal Database, MIDFIELD contains student-level records for all undergraduate, degree-seeking students at the partner institutions.\nAs of June 2024, MIDFIELD contains student-level records for 2.4 M undergraduates at 21 US institutions.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "introduction.html#facilitators",
    "href": "introduction.html#facilitators",
    "title": "Introduction",
    "section": "Facilitators",
    "text": "Facilitators\n\nSusan Lord\n\nDirector of the MIDFIELD Institute and Professor and Chair of Integrated Engineering at the University of San Diego. She is a Fellow of the IEEE and the ASEE. Dr. Lord has considerable experience facilitating workshops including the National Effective Teaching Institute (NETI) and special sessions at FIE. (slord@sandiego.edu)\n\nMatthew Ohland\n\nMIDFIELD Director and Principal Investigator. He is the the Dale and Suzi Gallagher Professor and Associate Head of Engineering Education at Purdue University and a Fellow of IEEE, ASEE, and AAAS. Dr. Ohland has considerable experience facilitating workshops including the NETI and CATME training. (ohland@purdue.edu)\n\nMarisa Orr\n\n(On leave.) MIDFIELD Associate Director and Associate Professor in Engineering and Science Education with a joint appointment in Mechanical Engineering at Clemson University. She received the 2009 Helen Plants Award for the best nontraditional session at FIE, “Enhancing Student Learning Using SCALE-UP Format.” (marisak@clemson.edu)\n\nRussell Long\n\n(Retired.) MIDFIELD Managing Director and Data Steward. He developed the stratified data sample for the R packages used in this workshop. Mr. Long is a SAS expert with over twenty years of experience in institutional research and assessment. (ralong@purdue.edu)\n\nRichard Layton\n\nMIDFIELD Data Visualization Specialist and Professor Emeritus of Mechanical Engineering, Rose-Hulman Institute of Technology. He is the lead developer of the R packages used with the MIDFIELD practice data sets and the associated tutorials and workshop activities. (graphdoctor@gmail.com)",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "introduction.html#publications",
    "href": "introduction.html#publications",
    "title": "Introduction",
    "section": "Publications",
    "text": "Publications\nThe MIDFIELD team has been exploring and presenting the stories in the MIDFIELD data for over 10 years. To see a sample of our work, you can follow these links:\n\nLord SM, Ohland MW, Layton RA, and Camacho MM (2019) Beyond pipeline and pathways: Ecosystem metrics. Journal of Engineering Education, 108, 32–56. Wickenden best paper award.\nLord SM, Layton RA, and Ohland MW (2015) Multi-Institution study of student demographics and outcomes in Electrical and Computer Engineering in the USA, IEEE Transactions on Education, 58(3), 141–150. Batchman best paper award.\nBrawner CE, Lord SM, Layton RA, Ohland MW, and Long RA (2015) Factors affecting women’s persistence in chemical engineering, International Journal of Engineering Education 31(6A), 1431–1447.\n\nLink to a comprehensive list of publications by researchers using MIDFIELD.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "introduction.html#acknowledgements",
    "href": "introduction.html#acknowledgements",
    "title": "Introduction",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nFunding provided by the National Science Foundation grant numbers 1545667 and 2142087.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "manage/2023-agenda.html",
    "href": "manage/2023-agenda.html",
    "title": "Program",
    "section": "",
    "text": "Image: Today’s Agenda by Rajiv Patel is licensed under CC BY-NC 2.0"
  },
  {
    "objectID": "manage/2023-agenda.html#pre-workshop",
    "href": "manage/2023-agenda.html#pre-workshop",
    "title": "Program",
    "section": "Pre-workshop",
    "text": "Pre-workshop\nPre-workshop tutorials\nIf you are new to R (or new to the ggplot2 or data.table packages), we recommend you complete the three introductory tutorials listed below. Completing these tutorials before attending the Institute will make your time with us that much more productive.\n\nR basics\n\nR chart basics\nR data basics"
  },
  {
    "objectID": "manage/2023-agenda.html#tuesday-july-11",
    "href": "manage/2023-agenda.html#tuesday-july-11",
    "title": "Program",
    "section": "Tuesday, July 11",
    "text": "Tuesday, July 11\nJoin the online office hours\nOffice hours\n1:00–5:00 pm Eastern Time. We are available for answering questions and resolving problems you encounter installing R or working with R in the three pre-workshop tutorials."
  },
  {
    "objectID": "manage/2023-agenda.html#wednesday-july-12",
    "href": "manage/2023-agenda.html#wednesday-july-12",
    "title": "Program",
    "section": "Wednesday, July 12",
    "text": "Wednesday, July 12\nJoin the online meeting\nIntroductions  slides\n1:00–1:50 Eastern Time\nIntroduce facilitators and participants, objectives, and MIDFIELD.\nBreak\n1:50–2:00\nExploring data structure  slides\n2:00–3:00\nExploring data excerpts manually.\n\nStudent 3 data example\nStudent 4 data example\n\nCIP website NCES Classification of Instructional Programs (CIP)\n\nGuided practice.\n3:00–5:00\nSelf-paced case study using midfieldr and midfielddata. Real-time help.\n\nCase study: Goals A short reading.\n\nCase study: Data A midfieldr tutorial.\n\nWrap-up.\nbefore 5:00\nPlease check in with us before leaving the virtual meeting.\nHomework\n\nComplete the guided practice “Data” tutorial.\nFor our think-share activities in tomorrow’s data visualization session, consider printing a hard-copy of the worksheet. (Download link in tomorrow’s program below.)\nOptional (FYI). Topics from today’s guided practice are developed in greater detail in midfieldr package vignettes [link]."
  },
  {
    "objectID": "manage/2023-agenda.html#thursday-july-13",
    "href": "manage/2023-agenda.html#thursday-july-13",
    "title": "Program",
    "section": "Thursday, July 13",
    "text": "Thursday, July 13\nJoin the online meeting\nMetaphors and metrics  slides\n1:00–1:30 Eastern Time\nPipelines, pathways, and ecosystems.\nSupplement.  slides. Finding the migration yield metric. A supplemental reference that outlines our iterative process of develop an argument that concludes with a new metric (migration yield) and its chart. Illustrates the iterative interplay between one’s visual rhetoric and one’s verbal rhetoric.\nBreak\n1:30–1:40\nGuided practice\n1:40–2:30\nCase study: Results Continue the case study.\nData visualization session 1  slides  worksheets\n2:30–3:20\nA hard-copy printout of the worksheet is recommended for our think-share activities. We demonstrate the perceptual limitations of common graph types and suggest more effective alternatives. Our goals in visual rhetoric are\n\nImproving perception of stories in the data\nFacilitating quantitative reasoning about the data\nEnhancing credibility of evidence supporting an argument\n\nBreak\n3:20–3:30\nDrafting a research question.\n3:30–5:00\nDefine a problem in the data that interests you with our assistance, form small groups. Report out your research questions and discussion.\nResources\n\n(optional) Getting started (midfieldr article) to inspect the variables and values in the four practice data tables.\n(optional) Data dictionaries\n\nstudent table practice data / research data\nterm table practice data / research data\ncourse table practice data / research data\ndegree table practice data / research data\n\n\nWrap-up.\nbefore 5:00\nPlease check in with us before leaving the virtual meeting.\nHomework\n\nComplete the guided practice “Results” tutorial.\nRefine your plan for working on your research question.\n\nFor our think-share activities in tomorrow’s data visualization session, consider printing a hard-copy of the worksheet. (Download link in tomorrow’s program below.)\nOptional (FYI). Topics from today’s guided practice are developed in greater detail in midfieldr package vignettes [link]."
  },
  {
    "objectID": "manage/2023-agenda.html#friday-july-14",
    "href": "manage/2023-agenda.html#friday-july-14",
    "title": "Program",
    "section": "Friday, July 14",
    "text": "Friday, July 14\nJoin the online meeting\nData visualization session 2: Expanding your graphical repertoire  slides  worksheets\n1:00–2:00 Eastern Time\nA hard-copy printout of the worksheet is recommended for our think-share activities. We illustrate a repertoire of chart types and how they are suited to specific data structures and answering specific types of questions.\nGuest speaker  slides Sankey diagram by Erica Ives\n2:00–2:10\nWork on your research question  suggested goals\n2:10–3:30\nConsult with us on your progress, discussion\nData dictionaries for the MIDFIELD research data set.\n\nstudent\nterm\ncourse\ndegree\n\nProgress report\n3:30–4:30\nShare with the group.\nWrap up  slides\n4:40–4:45"
  },
  {
    "objectID": "manage/2023-agenda.html#after-the-workshop",
    "href": "manage/2023-agenda.html#after-the-workshop",
    "title": "Program",
    "section": "After the workshop",
    "text": "After the workshop\nR resources Additional links and books you might find useful"
  },
  {
    "objectID": "r-resources.html",
    "href": "r-resources.html",
    "title": "Resources",
    "section": "",
    "text": "Image: Library by Ming-Yueh Wang is licensed under CC BY-NC-ND 2.0\nIf you happen to come across other resources that you find useful, please let us know and we’ll add them to the list.",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "r-resources.html#package-links",
    "href": "r-resources.html#package-links",
    "title": "Resources",
    "section": "Package links",
    "text": "Package links\n\nmidfieldr\nmidfielddata\nggplot2\ndata.table",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "r-resources.html#using-r",
    "href": "r-resources.html#using-r",
    "title": "Resources",
    "section": "Using R",
    "text": "Using R\n\nAtrebas (2019) for doing identical tasks in the data.table and dplyr environments. Very useful if you are familiar with dplyr syntax and want to translate that familiar functionality to data.table syntax.\nDowle & Srinivasan (2022) for the data.table website with vignettes by the package authors\nHoltz (2018) for a gallery of chart designs possible with ggplot2.\nR-bloggers, a searchable aggregator of R blogs.\nStackoverflow Searchable, public platform for coding questions and answers. For R-specific Q&A, add [r] as a search tag. Additional search tags such as [ggplot2] or [data.table] will help narrow your searches involving these packages.\nRStudio (2022) Links to downloadable help summaries (cheat sheets) for ggplot2 and many other packages. For data.table scroll down to the “Contributed cheatsheets” section.\nZumel & Mount (2020) for data science work with a very good chapter on data manipulation that performs every step three ways: a base R solution, a data.table solution, and a dplyr solution.",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "r-resources.html#data-visualization",
    "href": "r-resources.html#data-visualization",
    "title": "Resources",
    "section": "Data visualization",
    "text": "Data visualization\nBooks\n\nCairo (2019) for a data journalist’s approach to avoiding lying to an audience (and to one’s self).\nCleveland (1993) for a detailed look at matching chart design to the types of variables.\nRobbins (2013) for a detailed development of principles and practices for creating effective charts, based largely on Cleveland’s work.\nTufte (1983) One of the best developments of aligning one’s visual rhetoric to one’s verbal rhetoric.\nWainer (1997) Often humorous in presenting do’s and dont’s of data display\nWainer (2014) Using evidence and visualization to improve healthcare.\n\nBlogs\n\nEvergreen (2023) Intentional reporting and data visualization\nFew (2021) Visual business intelligence\nKnaflic (2023) Storytelling with data\nLayton (2023) for Richard’s blog in which several articles illustrate redesigning a published chart in an engineering education article to better align the logic of a display with the logic of the argument.",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "r-resources.html#data-visualization-using-r",
    "href": "r-resources.html#data-visualization-using-r",
    "title": "Resources",
    "section": "Data visualization using R",
    "text": "Data visualization using R\n\nHealy (2019) Hands-on introduction to principles and practices of looking at and prsenting data using R and ggplot2.\nMachlis (2019) Especially useful for spreadsheet users who want to “graduate” to a reproducible scripted programming language.",
    "crumbs": [
      "Resources"
    ]
  }
]