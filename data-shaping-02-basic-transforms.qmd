---
title: "Basic transforms"
---

![Image: *Transformers* by danjo paluska is licensed under [CC BY 2.0](https://creativecommons.org/licenses/by/2.0/)](figures/data-shaping-2.png)

```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(comment = "#>", 
                      collapse = TRUE, 
                      message = FALSE)
```

Using **base R**, **data.table**, and **dplyr/tidyr** to transform MIDFIELD data as needed for your analysis.

In this section we demonstrate adding and removing columns, editing column names, creating two new columns by splitting a character column, converting the class of a column, and recoding the values in a column. 

## Setup

*Load* packages.

```{r}
library("midfielddata")
library("data.table")
library("dplyr", warn.conflicts = FALSE)
library("tidyr")
library("wrapr")
```

*Format* data as described in the  [Introduction](data-shaping-00-introduction.html).

```{r}
data(student, term)
```

```{r}
#| class: base
# base R
student_df <- data.frame(student)
term_df <- data.frame(term)
```

```{r}
#| class: dtbl
# data.table
student_dt <- copy(student)
term_dt <- copy(term)
```

```{r}
#| class: dplyr
# dplyr
student_tbl <- tibble(student)
term_tbl <- tibble(term)
```

<br>

## Adding columns

[Task.]{.important}  Add a column to the student table for total SAT score. 

```{r}
columns_we_want <- c("mcid", "sat_math", "sat_verbal", "act_comp")
```

```{r}
#| class: base
# base R
result_df <- student_df[, columns_we_want, drop = FALSE]
result_df$sat_total <- result_df$sat_math + result_df$sat_verbal
```

```{r}
#| class: dtbl
# data.table
result_dt <- student_dt[, ..columns_we_want]
result_dt[, sat_total := sat_math + sat_verbal]
```

```{r}
#| class: dplyr
# dplyr
result_tbl <- student_tbl %>%
  select(all_of(columns_we_want)) %>%
  mutate(sat_total = sat_math + sat_verbal)
```

```{r}
result_dt

check_equiv_frames(result_df, result_dt)
check_equiv_frames(result_dt, result_tbl)
```

[Comments]{.important} 

- *base R.* `df$new_col` creates the new column.  

- *data.table.* `:=` alters or creates columns "in place". The `data.table` at hand gets altered instead of a new one being created.  

- *dplyr.* New columns are created with `mutate()`. 

## Removing columns

In previous examples, when selecting some columns we have implicitly removed every column not selected (if any). Here we explicitly select the columns to be removed.  

[Task.]{.important}  Using the results from the previous example, remove the SAT math and verbal columns. 

```{r}
#| class: base
# base R
result_df[c("sat_math", "sat_verbal")] <- NULL
```

```{r}
#| class: dtbl
# data.table
result_dt[, c("sat_math", "sat_verbal") := NULL]
```

```{r}
#| class: dplyr
# dplyr
result_tbl <- result_tbl %>%
  select(-sat_math, -sat_verbal)
```

```{r}
result_dt

check_equiv_frames(result_df, result_dt)
check_equiv_frames(result_dt, result_tbl)
```

[Comments]{.important} 

- *base R.* 

- *data.table.*  Use a vector of column names and `:=` to remove the columns "in place". 

- *dplyr.* Use `select()` with minus signs. 

## Editing column names

[Task.]{.important}  Using the results from the previous example, rename the columns. 

In each case, we take care to explicitly match old and new names.  

```{r}
#| class: base
# base R
names(result_df)[names(result_df) == "mcid"] <- "Student"
names(result_df)[names(result_df) == "sat_total"] <- "SAT"
names(result_df)[names(result_df) == "act_comp"] <- "ACT"
```

```{r}
#| class: dtbl
# data.table
setnames(result_dt,
  old = c("mcid", "sat_total", "act_comp"),
  new = c("Student", "SAT", "ACT")
)
```

```{r}
#| class: dplyr
# dplyr
result_tbl <- result_tbl %>%
	rename(Student = mcid, SAT = sat_total, ACT = act_comp)
```

```{r}
result_dt

check_equiv_frames(result_df, result_dt)
check_equiv_frames(result_dt, result_tbl)
```

[Comments]{.important} 

- *base R.* While other approaches work too, this approach ensures that old and new names are explicitly matched. 

- *data.table.*  `setnames()` edits the column names in place. 

- *dplyr.* `rename()` uses `new_name = old_name` syntax.  

## Split a character column

[Task.]{.important}  In the `term` data, create new columns for year `YYYY` and term code `T` by splitting the character `term` column. 

In each system, we use the base R `substr()` function to split the `term` character value into a 4-character year in one new column and a 1-character term-code in a new second column. We also drop rows with missing values (if any). 
 
```{r}
columns_we_want <- c("mcid", "term")
```

```{r}
#| class: base
# base R
DF <- term_df[, columns_we_want, drop = FALSE]
DF$year <- substr(DF$term, 1, 4)
DF$term_code <- substr(DF$term, 5, 5)
result_df <- na.omit(DF)
```

```{r}
#| class: dtbl
# data.table
DT <- term_dt[, ..columns_we_want]
DT[, c("year", "term_code") := .(substr(term, 1, 4), substr(term, 5, 5))]
result_dt <- na.omit(DT)
```

```{r}
#| class: dplyr
# dplyr
result_tbl <- term_tbl %>%
  select(mcid, term) %>%
  mutate(year = substr(term, 1, 4), term_code = substr(term, 5, 5)) %>%
  drop_na()
```

```{r}
options(datatable.print.topn = 5)
result_dt

check_equiv_frames(result_df, result_dt)
check_equiv_frames(result_dt, result_tbl)
```

[Comments]{.important} 

- *base R.* 

- *data.table.*  

- *dplyr.* 

## Convert column class

[Task.]{.important}  Using the results from the previous example, convert character year to numerical class.

```{r}
#| class: base
# base R
result_df$year <- as.double(result_df$year)
```

```{r}
#| class: dtbl
# data.table
result_dt[, year := as.double(year)]
```

```{r}
#| class: dplyr
# dplyr
result_tbl <- result_tbl %>%
  mutate(year = as.double(year))
```

```{r}
result_dt

check_equiv_frames(result_df, result_dt)
check_equiv_frames(result_dt, result_tbl)
```

[Comments]{.important} 

- *base R.* 

- *data.table.*  

- *dplyr.* 

## Recode column values

[Task.]{.important}  Using the results from the previous example, recode the term-codes from numbers to academic terms "Fall", "Winter", etc.

"Recoding" typically entails replacing existing values in a column with new, recoded values. For the sake of clarity in this example we assign the new encodings to a new column---not strictly necessary but it makes it easier to check the results. The existing column is `term_code`; the new column is `term_name`. 

```{r}
#| class: base
# base R
result_df <- within(result_df, {
	term_name <- NA
	term_name[term_code == "1"] <- "Fall"
	term_name[term_code == "2"] <- "Winter"
	term_name[term_code == "3"] <- "Spring"
	term_name[term_code == "4"] <- "Summer 1"
	term_name[term_code == "5"] <- "Summer 2"
	term_name[term_code == "6"] <- "Summer 3"
})
```

```{r}
#| class: dtbl
# data.table
result_dt[, term_name := fcase(
  term_code == "1", "Fall",
  term_code == "2", "Winter",
  term_code == "3", "Spring",
  term_code == "4", "Summer 1",
  term_code == "5", "Summer 2",
  term_code == "6", "Summer 3"
)]
```

```{r}
#| class: dplyr
# dplyr
result_tbl <- result_tbl %>%
  mutate(term_name = case_match(
    term_code,
    "1" ~ "Fall",
    "2" ~ "Winter",
    "3" ~ "Spring",
    "4" ~ "Summer 1",
    "5" ~ "Summer 2",
    "6" ~ "Summer 3"
  ))
```

```{r}
result_dt

check_equiv_frames(result_df, result_dt)
check_equiv_frames(result_dt, result_tbl)
```

[Comments]{.important} 

- *base R.* `within()` is similar to `with()` but allows us to modify a data frame. We create the new column with `term_name <- NA` then systematically edit its values based on the values in `term_code`. 

- *data.table.* `term_name` is created using `:=` then `fcase()` assigns its  values based on logical expressions operating on `term_code`. 

- *dplyr.* `term_name` is created using `mutate()` then `case_match()` assigns its values by finding matches to the `term_code` values. 

## References 

<div id="refs"></div>
