{
  "hash": "12db3f724cb0a5e561c9484ae977232c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Shaping MIDFIELD data three ways\"\nformat:\n  html:\n    css: styles.css\n---\n\n\n![Image: *Workshop* by Daniel Mee is licensed under [CC BY 2.0](https://creativecommons.org/licenses/by/2.0/)](figures/data-shaping-0.png)\n\n\n\n\n\nUsing **base R**, **data.table**, and **dplyr** to transform MIDFIELD data as needed for your analysis. \n\n- [Introduction](data-shaping-00-introduction.html)  &#9665; *You are here.*\n- [Data selection](data-shaping-01-data-selection.html)\n- [Basic transforms](data-shaping-02-basic-transforms.html)\n- [Aggregating transforms](data-shaping-03-aggregating-transforms.html)\n- [Multi-table transforms](data-shaping-04-multi-table-transforms.html)\n- [Reshaping transforms](data-shaping-05-reshaping-transforms.html)\n\nIn this series of articles, we hope to address the needs of users who would prefer to use base R or dplyr syntax in lieu of the data.table syntax that appears everywhere else in midfieldr. We illustrate common data shaping tasks three ways: using base R, data.table, and dplyr systems. \n\nSources for translating among the three systems include [@Atrebas:2019; @Gimond:2019; @Hajnala:2018; @Mercer:2020; and @Vaughan:2023]. In particular, our outline is roughly based on Chapter 5 of [@Zumel+Mount:2020]. \n\n\n\n\n\n## Getting started\n\n[Project organization.]{.important} If you are writing your own scripts to follow along, our tutorials assume that you:\n\n- Are working within an [RStudio Project](before-you-arrive.html#start-the-setup)\n- Have set up a directory structure with folders for [data, scripts,  results](before-you-arrive.html#add-some-folders).\n\n[Packages.]{.important}  We use the following packages in the data-shaping articles. You can copy a code chunk by clicking on the \"Copy to clipboard\" icon ![](figures/clipboard-icon.png).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"midfielddata\")\nlibrary(\"data.table\")\nlibrary(\"dplyr\", warn.conflicts = FALSE)\nlibrary(\"tidyr\")\nlibrary(\"wrapr\")\n```\n:::\n\n\n[Download and save CSV files.]{.important} In addition to the student record data in the midfielddata package, we have some prepared data to download from the Institute repository (an Internet connection is required). To download the CSV files and save to the `data` directory in your RStudio project folder, run the following lines *once.*  \n\n```r\n# ever-enrolled data frame\ndata_url <- \"https://raw.githubusercontent.com/MIDFIELDR/2024-midfield-institute/main/data/ever_enrolled.csv\"\never_enrolled <- fread(data_url)\nfwrite(ever_enrolled, \"data/ever_enrolled.csv\")\n\n# graduates data frame\ndata_url <- \"https://raw.githubusercontent.com/MIDFIELDR/2024-midfield-institute/main/data/graduates.csv\"\ngraduates <- fread(data_url)\nfwrite(graduates, \"data/graduates.csv\")\n```\n\n\n\n\n## Data \n\nImport the CSV files we just downloaded. \n\n\n::: {.cell}\n\n```{.r .cell-code}\never <- fread(\"data/ever_enrolled.csv\")\ngrad <- fread(\"data/graduates.csv\")\n```\n:::\n\n\nLoad the datasets from midfielddata. View data dictionaries via `?student` and `?term`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(student, term)\n```\n:::\n\n\nHave a quick look at each one using dplyr `glimpse()`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(ever)\n#> Rows: 5,653\n#> Columns: 2\n#> $ mcid    <chr> \"MCID3111142965\", \"MCID3111145102\", \"MCID3111146537\", \"MCID311…\n#> $ program <chr> \"EE\", \"EE\", \"EE\", \"EE\", \"ISE\", \"ME\", \"CE\", \"EE\", \"EE\", \"ISE\", …\n\nglimpse(grad)\n#> Rows: 3,264\n#> Columns: 2\n#> $ mcid    <chr> \"MCID3111142965\", \"MCID3111145102\", \"MCID3111146537\", \"MCID311…\n#> $ program <chr> \"EE\", \"EE\", \"EE\", \"EE\", \"ISE\", \"ME\", \"CE\", \"EE\", \"EE\", \"ISE\", …\n\nglimpse(student)\n#> Rows: 97,555\n#> Columns: 13\n#> $ mcid           <chr> \"MCID3111142225\", \"MCID3111142283\", \"MCID3111142290\", \"…\n#> $ institution    <chr> \"Institution B\", \"Institution J\", \"Institution J\", \"Ins…\n#> $ transfer       <chr> \"First-Time Transfer\", \"First-Time Transfer\", \"First-Ti…\n#> $ hours_transfer <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n#> $ race           <chr> \"Asian\", \"Asian\", \"Asian\", \"Asian\", \"Asian\", \"Asian\", \"…\n#> $ sex            <chr> \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Male\", \"Male…\n#> $ age_desc       <chr> \"Under 25\", \"Under 25\", \"Under 25\", \"Under 25\", \"Under …\n#> $ us_citizen     <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\",…\n#> $ home_zip       <chr> NA, \"22020\", \"23233\", \"20853\", \"22003\", \"23234\", \"24148…\n#> $ high_school    <chr> NA, NA, \"471872\", NA, \"470080\", \"471877\", NA, NA, NA, N…\n#> $ sat_math       <dbl> NA, 560, 510, 640, 600, 570, 480, NA, NA, NA, 520, 430,…\n#> $ sat_verbal     <dbl> NA, 230, 380, 460, 500, 530, 530, NA, NA, NA, 490, 490,…\n#> $ act_comp       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n\nglimpse(term)\n#> Rows: 639,915\n#> Columns: 13\n#> $ mcid                <chr> \"MCID3111142225\", \"MCID3111142283\", \"MCID311114228…\n#> $ institution         <chr> \"Institution B\", \"Institution J\", \"Institution J\",…\n#> $ term                <chr> \"19881\", \"19881\", \"19883\", \"19885\", \"19891\", \"1989…\n#> $ cip6                <chr> \"140901\", \"240102\", \"240102\", \"190601\", \"190601\", …\n#> $ level               <chr> \"01 First-year\", \"01 First-year\", \"01 First-year\",…\n#> $ standing            <chr> \"Good Standing\", \"Academic Probation\", \"Academic P…\n#> $ coop                <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"N…\n#> $ hours_term          <dbl> 7, 6, 12, 6, 6, 6, 6, 18, 15, 14, 13, 3, 13, 3, 3,…\n#> $ hours_term_attempt  <dbl> 7, 6, 12, 6, 6, 6, 6, 18, 18, 14, 13, 3, 13, 3, 3,…\n#> $ hours_cumul         <dbl> 7, 6, 18, 24, 30, 36, 42, 63, 78, 14, 27, 60, 82, …\n#> $ hours_cumul_attempt <dbl> 7, 6, 18, 24, 30, 36, 42, 63, 81, 14, 27, 60, 82, …\n#> $ gpa_term            <dbl> 2.56, 1.85, 1.93, 2.15, 1.85, 1.20, 1.85, 2.33, 2.…\n#> $ gpa_cumul           <dbl> 2.56, 1.85, 1.90, 1.96, 1.94, 1.82, 1.82, 1.98, 2.…\n```\n:::\n\n\n\n\n\n\n## Three systems\n\nFor every data frame we use, we construct a separate version for each system. For example, the three versions of the `student` table are prepared using:  \n\n\n::: {.cell class='base'}\n\n```{.r .cell-code}\n# base R\nstudent_df <- data.frame(student)\n```\n:::\n\n::: {.cell class='dtbl'}\n\n```{.r .cell-code}\n# data.table\nstudent_dt <- copy(student)\n```\n:::\n\n::: {.cell class='dplyr'}\n\n```{.r .cell-code}\n# dplyr\nstudent_tbl <- tibble(student)\n```\n:::\n\n\nLines of code for each system are in separate, color-coded blocks. Data-frame names are assigned to identify the system as well, as outlined in Table 1.  \n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: Table 1: Name and class of data frames by system\n\n|system     |suffix |example       |class                     |\n|:----------|:------|:-------------|:-------------------------|\n|base R     |`_df`  |`student_df`  |`data.frame`              |\n|data.table |`_dt`  |`student_dt`  |`data.frame, data.table`  |\n|dplyr      |`_tbl` |`student_tbl` |`data.frame, tbl_df, tbl` |\n\n\n:::\n:::\n\n\n\n\n\n\n## Method\n\n1. We want to make each operation as transparent as possible for the R novice. Hence we generally write a line of code to do one thing, avoiding combined or nested operations and introducing intermediate or temporary variables that get overwritten before reaching a desired result, e.g., `DF` for an intermediate data.frame, `DT` for an intermediate data.table, `vec` for an intermediate vector, etc.  \n\n2. In the same vein, we sometimes use intermediate variables for indexing, e.g. `rows_we_want`, `columns_we_want`, `order_index`, etc. \n\n3. In general, we show only one approach per task per system, offering what we think is the best choice for our audience. In R there are usually multiple approaches for the same task and resources for exploring other methods are readily available. \n\n4. We follow the convention of chaining dplyr steps with the magrittr pipe `%>%` (though assigning temporary variables would work just as well). We do not generally use the piping or chaining operations available in base R and data.table.  \n\n5. In each example, results are manipulated such that base R, data.table, and dplyr yield the same form (usually a data frame) with the same variables and observations. In most cases, we compare data frame equivalence with  `wrapr::check_equiv_frames()` which converts its arguments to data.frame class and reorders columns and rows. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_equiv_frames(student_df, student_dt)\n#> [1] TRUE\ncheck_equiv_frames(student_dt, student_tbl)\n#> [1] TRUE\n```\n:::\n\n\n6. In cases where re-ordering ows or columns is part of the task, we compare results by using base R `all.equal()` instead of `check_equiv_frames()`. By setting the `check.attributes` argument to FALSE, data frame attributes (other than column names) are ignored, for example, row.names (if any) and class (e.g., `tbl` or `data.table`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall.equal(student_df, student_dt, check.attributes = FALSE)\n#> [1] TRUE\nall.equal(student_dt, student_tbl, check.attributes = FALSE)\n#> [1] TRUE\n```\n:::\n\n\n\n\n\n\n## References \n\n<div id=\"refs\"></div>\n\n\n\n\n\n## Appendix\n\nThe R and package version numbers (as of this writing) are: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nR.version$version.string\n#> [1] \"R version 4.4.1 (2024-06-14 ucrt)\"\npackageVersion(\"midfielddata\")\n#> [1] '0.2.1'\npackageVersion(\"data.table\")\n#> [1] '1.15.4'\npackageVersion(\"dplyr\")\n#> [1] '1.1.4'\npackageVersion(\"tidyr\")\n#> [1] '1.3.1'\npackageVersion(\"wrapr\")\n#> [1] '2.1.0'\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}