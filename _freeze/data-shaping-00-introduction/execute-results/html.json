{
  "hash": "c3c55106d5b79953f847ddd2acfe2bbf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Shaping MIDFIELD data three ways\"\nformat:\n  html:\n    css: styles.css\n---\n\n\n![Image: *Workshop* by Daniel Mee is licensed under [CC BY 2.0](https://creativecommons.org/licenses/by/2.0/)](figures/data-shaping-0.png)\n\n\n\n\n\nUsing **base R**, **data.table**, and **dplyr** to transform MIDFIELD data as needed for your analysis. \n\n- [Introduction](data-shaping-00-introduction.html)  &#9665; *You are here.*\n- [Data selection](data-shaping-01-data-selection.html)\n- [Basic transforms](data-shaping-02-basic-transforms.html)\n- [Aggregating transforms](data-shaping-03-aggregating-transforms.html)\n- [Multi-table transforms](data-shaping-04-multitable-transforms.html)\n- [Reshaping transforms](data-shaping-05-reshaping-transforms.html)\n\nIn this series of articles, we hope to address the needs of users who would prefer to use base R or dplyr syntax in lieu of the data.table syntax that appears everywhere else in midfieldr. Many of these methods appear in other midfieldr vignettes, but only as needed to achieve the specific task at hand and only using the data.table system. Here we approach the tasks more systematically and include all three systems.  \n\nSources for translating among the three systems include [@Atrebas:2019; @Gimond:2019; @Hajnala:2018; @Mercer:2020; and @Vaughan:2023]. In particular, our outline is roughly based on Chapter 5 of [@Zumel+Mount:2020]. \n\n\n\n\n\n\n\n## Getting started\n\n*Start.* &nbsp;   If you are writing your own script to follow along, we use these packages in the data-shaping articles:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(midfielddata) # datasets\nlibrary(data.table) # data manipulation system\nlibrary(dplyr) # data manipulation system\nlibrary(tidyr) # drop_na()\n```\n:::\n\n\n*Load.* &nbsp;  Practice datasets. View data dictionaries via `?student` and `?term`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(student, term)\n```\n:::\n\n\nWe construct a different version of these data tables for each system (base R, data.table, and dplyr). \n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: Table 1: Data-preparation data frame names and classes\n\n|system     |name                          |class                     |\n|:----------|:-----------------------------|:-------------------------|\n|base R     |`student_base`, `term_base`   |`data.frame`              |\n|data.table |`student_DT`, `term_DT`       |`data.frame, data.table`  |\n|dplyr      |`student_dplyr`, `term_dplyr` |`data.frame, tbl_df, tbl` |\n\n\n:::\n:::\n\n\n<br>\n\nEquivalent code chunks for the three systems are color-coded. \n\n\n::: {.cell class='base'}\n\n```{.r .cell-code}\n# base R\nstudent_base <- data.frame(student)\nterm_base <- data.frame(term)\n```\n:::\n\n::: {.cell class='dtbl'}\n\n```{.r .cell-code}\n# data.table\nstudent_DT <- copy(student)\nterm_DT <- copy(term)\n```\n:::\n\n::: {.cell class='dplyr'}\n\n```{.r .cell-code}\n# dplyr\nstudent_dplyr <- tibble(student)\nterm_dplyr <- tibble(term)\n```\n:::\n\n\n### Usage notes\n\n1. For clarity, we generally write a line of code to do one thing, avoiding combined or nested operations. Thus we often introduce intermediate or temporary variables that get overwritten before reaching a desired result. Our goal is to make each operation as transparent as possible for the R novice. \n\n1. We also show only one approach per task per system---other resources are available for comprehensive development of these systems.   \n\n1. It is traditional to chain dplyr steps with the magrittr pipe `%>%` (though assigning temporary variables would work just as well).\n\n1. In each example, results are manipulated such that base R, data.table, and dplyr yield the same form (usually a data frame) with the same variables and observations. We convert results to data.table format and compare using `all.equal()` with arguments sometimes set to ignore attributes, row order, or column order. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nall.equal(student_DT, data.table(student_base), check.attributes = FALSE)\n#> [1] TRUE\nall.equal(term_DT, data.table(term_dplyr))\n#> [1] TRUE\n```\n:::\n\n\n\n\n### Practice data\n\nIt's always a good idea to review the data structure before starting.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(student)\n#> Classes 'data.table' and 'data.frame':\t97555 obs. of  13 variables:\n#>  $ mcid          : chr  \"MCID3111142225\" \"MCID3111142283\" \"MCID3111142290\" \"MCID3111142294\" ...\n#>  $ institution   : chr  \"Institution B\" \"Institution J\" \"Institution J\" \"Institution J\" ...\n#>  $ transfer      : chr  \"First-Time Transfer\" \"First-Time Transfer\" \"First-Time Transfer\" \"First-Time Transfer\" ...\n#>  $ hours_transfer: num  NA NA NA NA NA NA NA NA NA NA ...\n#>  $ race          : chr  \"Asian\" \"Asian\" \"Asian\" \"Asian\" ...\n#>  $ sex           : chr  \"Male\" \"Female\" \"Male\" \"Male\" ...\n#>  $ age_desc      : chr  \"Under 25\" \"Under 25\" \"Under 25\" \"Under 25\" ...\n#>  $ us_citizen    : chr  \"Yes\" \"Yes\" \"Yes\" \"Yes\" ...\n#>  $ home_zip      : chr  NA \"22020\" \"23233\" \"20853\" ...\n#>  $ high_school   : chr  NA NA \"471872\" NA ...\n#>  $ sat_math      : num  NA 560 510 640 600 570 480 NA NA NA ...\n#>  $ sat_verbal    : num  NA 230 380 460 500 530 530 NA NA NA ...\n#>  $ act_comp      : num  NA NA NA NA NA NA NA NA NA NA ...\n#>  - attr(*, \".internal.selfref\")=<externalptr> \n#>  - attr(*, \"index\")= int(0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(term)\n#> Classes 'data.table' and 'data.frame':\t639915 obs. of  13 variables:\n#>  $ mcid               : chr  \"MCID3111142225\" \"MCID3111142283\" \"MCID3111142283\" \"MCID3111142283\" ...\n#>  $ institution        : chr  \"Institution B\" \"Institution J\" \"Institution J\" \"Institution J\" ...\n#>  $ term               : chr  \"19881\" \"19881\" \"19883\" \"19885\" ...\n#>  $ cip6               : chr  \"140901\" \"240102\" \"240102\" \"190601\" ...\n#>  $ level              : chr  \"01 First-year\" \"01 First-year\" \"01 First-year\" \"01 First-year\" ...\n#>  $ standing           : chr  \"Good Standing\" \"Academic Probation\" \"Academic Probation\" \"Academic Probation\" ...\n#>  $ coop               : chr  \"No\" \"No\" \"No\" \"No\" ...\n#>  $ hours_term         : num  7 6 12 6 6 6 6 18 15 14 ...\n#>  $ hours_term_attempt : num  7 6 12 6 6 6 6 18 18 14 ...\n#>  $ hours_cumul        : num  7 6 18 24 30 36 42 63 78 14 ...\n#>  $ hours_cumul_attempt: num  7 6 18 24 30 36 42 63 81 14 ...\n#>  $ gpa_term           : num  2.56 1.85 1.93 2.15 1.85 1.2 1.85 2.33 2.32 2.15 ...\n#>  $ gpa_cumul          : num  2.56 1.85 1.9 1.96 1.94 1.82 1.82 1.98 2.04 2.15 ...\n#>  - attr(*, \".internal.selfref\")=<externalptr>\n```\n:::\n\n\n\n\n\n## References \n\n<div id=\"refs\"></div>\n\n\n\n## Appendix\n\nThe R and package version numbers (as of this writing) are: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nR.version$version.string\n#> [1] \"R version 4.4.1 (2024-06-14 ucrt)\"\npackageVersion(\"midfielddata\")\n#> [1] '0.2.1'\npackageVersion(\"data.table\")\n#> [1] '1.15.4'\npackageVersion(\"dplyr\")\n#> [1] '1.1.4'\npackageVersion(\"tidyr\")\n#> [1] '1.3.1'\n```\n:::\n",
    "supporting": [
      "data-shaping-00-introduction_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}