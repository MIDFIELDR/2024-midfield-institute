{
  "hash": "bf0eafa28c6f3ef4e026c77f30257dcb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Basic transforms\"\n---\n\n\n![Image: *Transformers* by danjo paluska is licensed under [CC BY 2.0](https://creativecommons.org/licenses/by/2.0/)](figures/data-shaping-2.png)\n\n\n\n\n\nUsing **base R**, **data.table**, and **dplyr/tidyr** to transform MIDFIELD data as needed for your analysis.\n\nIn this section we demonstrate adding and removing columns, editing column names, creating two new columns by splitting a character column, converting the class of a column, and recoding the values in a column. \n\n## Setup\n\n*Load* packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"midfielddata\")\nlibrary(\"data.table\")\nlibrary(\"dplyr\", warn.conflicts = FALSE)\nlibrary(\"tidyr\")\nlibrary(\"stringr\")\nlibrary(\"wrapr\")\n```\n:::\n\n\n*Format* data as described in the  [Introduction](data-shaping-00-introduction.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(student, term, degree)\n```\n:::\n\n::: {.cell class='base'}\n\n```{.r .cell-code}\n# base R\nstudent_df <- data.frame(student)\nterm_df <- data.frame(term)\ndegree_df <- data.frame(degree)\n```\n:::\n\n::: {.cell class='dtbl'}\n\n```{.r .cell-code}\n# data.table\nstudent_dt <- copy(student)\nterm_dt <- copy(term)\ndegree_dt <- copy(degree)\n```\n:::\n\n::: {.cell class='dplyr'}\n\n```{.r .cell-code}\n# dplyr\nstudent_tbl <- tibble(student)\nterm_tbl <- tibble(term)\ndegree_tbl <- tibble(degree)\n```\n:::\n\n\n<br>\n\n## Adding columns\n\n[Task.]{.important}  Add a column to the student table for total SAT score. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolumns_we_want <- c(\"mcid\", \"sat_math\", \"sat_verbal\", \"act_comp\")\n```\n:::\n\n::: {.cell class='base'}\n\n```{.r .cell-code}\n# base R\nresult_df <- student_df[, columns_we_want, drop = FALSE]\nresult_df$sat_total <- result_df$sat_math + result_df$sat_verbal\n```\n:::\n\n::: {.cell class='dtbl'}\n\n```{.r .cell-code}\n# data.table\nresult_dt <- student_dt[, ..columns_we_want]\nresult_dt[, sat_total := sat_math + sat_verbal]\n```\n:::\n\n::: {.cell class='dplyr'}\n\n```{.r .cell-code}\n# dplyr\nresult_tbl <- student_tbl %>%\n  select(all_of(columns_we_want)) %>%\n  mutate(sat_total = sat_math + sat_verbal)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresult_dt\n#>                  mcid sat_math sat_verbal act_comp sat_total\n#>                <char>    <num>      <num>    <num>     <num>\n#>     1: MCID3111142225       NA         NA       NA        NA\n#>     2: MCID3111142283      560        230       NA       790\n#>     3: MCID3111142290      510        380       NA       890\n#>     4: MCID3111142294      640        460       NA      1100\n#>     5: MCID3111142299      600        500       NA      1100\n#>    ---                                                      \n#> 97551: MCID3112898886      530        560       29      1090\n#> 97552: MCID3112898890      570        580       25      1150\n#> 97553: MCID3112898894      510        590       24      1100\n#> 97554: MCID3112898895      420        590       32      1010\n#> 97555: MCID3112898940      470        540       32      1010\n\ncheck_equiv_frames(result_df, result_dt)\n#> [1] TRUE\ncheck_equiv_frames(result_dt, result_tbl)\n#> [1] TRUE\n```\n:::\n\n\n[Comments]{.important} \n\n- *base R.* `df$new_col` creates the new column.  \n\n- *data.table.* `:=` alters or creates columns \"in place\". The `data.table` at hand gets altered instead of a new one being created.  \n\n- *dplyr.* New columns are created with `mutate()`. \n\n## Removing columns\n\nIn previous examples, when selecting some columns we have implicitly removed every column not selected (if any). Here we explicitly select the columns to be removed.  \n\n[Task.]{.important}  Using the results from the previous example, remove the SAT math and verbal columns. \n\n\n::: {.cell class='base'}\n\n```{.r .cell-code}\n# base R\nresult_df[c(\"sat_math\", \"sat_verbal\")] <- NULL\n```\n:::\n\n::: {.cell class='dtbl'}\n\n```{.r .cell-code}\n# data.table\nresult_dt[, c(\"sat_math\", \"sat_verbal\") := NULL]\n```\n:::\n\n::: {.cell class='dplyr'}\n\n```{.r .cell-code}\n# dplyr\nresult_tbl <- result_tbl %>%\n  select(-sat_math, -sat_verbal)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresult_dt\n#>                  mcid act_comp sat_total\n#>                <char>    <num>     <num>\n#>     1: MCID3111142225       NA        NA\n#>     2: MCID3111142283       NA       790\n#>     3: MCID3111142290       NA       890\n#>     4: MCID3111142294       NA      1100\n#>     5: MCID3111142299       NA      1100\n#>    ---                                  \n#> 97551: MCID3112898886       29      1090\n#> 97552: MCID3112898890       25      1150\n#> 97553: MCID3112898894       24      1100\n#> 97554: MCID3112898895       32      1010\n#> 97555: MCID3112898940       32      1010\n\ncheck_equiv_frames(result_df, result_dt)\n#> [1] TRUE\ncheck_equiv_frames(result_dt, result_tbl)\n#> [1] TRUE\n```\n:::\n\n\n[Comments]{.important} \n\n- *base R.* \n\n- *data.table.*  Use a vector of column names and `:=` to remove the columns \"in place\". \n\n- *dplyr.* Use `select()` with minus signs. \n\n## Editing column names\n\n[Task.]{.important}  Using the results from the previous example, rename the columns. \n\nIn each case, we take care to explicitly match old and new names.  \n\n\n::: {.cell class='base'}\n\n```{.r .cell-code}\n# base R\nnames(result_df)[names(result_df) == \"mcid\"] <- \"Student\"\nnames(result_df)[names(result_df) == \"sat_total\"] <- \"SAT\"\nnames(result_df)[names(result_df) == \"act_comp\"] <- \"ACT\"\n```\n:::\n\n::: {.cell class='dtbl'}\n\n```{.r .cell-code}\n# data.table\nsetnames(result_dt,\n  old = c(\"mcid\", \"sat_total\", \"act_comp\"),\n  new = c(\"Student\", \"SAT\", \"ACT\")\n)\n```\n:::\n\n::: {.cell class='dplyr'}\n\n```{.r .cell-code}\n# dplyr\nresult_tbl <- result_tbl %>%\n\trename(Student = mcid, SAT = sat_total, ACT = act_comp)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresult_dt\n#>               Student   ACT   SAT\n#>                <char> <num> <num>\n#>     1: MCID3111142225    NA    NA\n#>     2: MCID3111142283    NA   790\n#>     3: MCID3111142290    NA   890\n#>     4: MCID3111142294    NA  1100\n#>     5: MCID3111142299    NA  1100\n#>    ---                           \n#> 97551: MCID3112898886    29  1090\n#> 97552: MCID3112898890    25  1150\n#> 97553: MCID3112898894    24  1100\n#> 97554: MCID3112898895    32  1010\n#> 97555: MCID3112898940    32  1010\n\ncheck_equiv_frames(result_df, result_dt)\n#> [1] TRUE\ncheck_equiv_frames(result_dt, result_tbl)\n#> [1] TRUE\n```\n:::\n\n\n[Comments]{.important} \n\n- *base R.* While other approaches work too, this approach ensures that old and new names are explicitly matched. \n\n- *data.table.*  `setnames()` edits the column names in place. \n\n- *dplyr.* `rename()` uses `new_name = old_name` syntax.  \n\n## Split a character column\n\n[Task.]{.important}  In the `term` data, create new columns for year `YYYY` and term code `T` by splitting the character `term` column. \n\nIn each system, we use the base R `substr()` function to split the `term` character value into a 4-character year in one new column and a 1-character term-code in a new second column. We also drop rows with missing values (if any). \n \n\n::: {.cell}\n\n```{.r .cell-code}\ncolumns_we_want <- c(\"mcid\", \"term\")\n```\n:::\n\n::: {.cell class='base'}\n\n```{.r .cell-code}\n# base R\nDF <- term_df[, columns_we_want, drop = FALSE]\nDF$year <- substr(DF$term, 1, 4)\nDF$term_code <- substr(DF$term, 5, 5)\nresult_df <- na.omit(DF)\n```\n:::\n\n::: {.cell class='dtbl'}\n\n```{.r .cell-code}\n# data.table\nDT <- term_dt[, ..columns_we_want]\nDT[, c(\"year\", \"term_code\") := .(substr(term, 1, 4), substr(term, 5, 5))]\nresult_dt <- na.omit(DT)\n```\n:::\n\n::: {.cell class='dplyr'}\n\n```{.r .cell-code}\n# dplyr\nresult_tbl <- term_tbl %>%\n  select(mcid, term) %>%\n  mutate(year = substr(term, 1, 4), term_code = substr(term, 5, 5)) %>%\n  drop_na()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(datatable.print.topn = 5)\nresult_dt\n#>                   mcid   term   year term_code\n#>                 <char> <char> <char>    <char>\n#>      1: MCID3111142225  19881   1988         1\n#>      2: MCID3111142283  19881   1988         1\n#>      3: MCID3111142283  19883   1988         3\n#>      4: MCID3111142283  19885   1988         5\n#>      5: MCID3111142283  19891   1989         1\n#>     ---                                       \n#> 639911: MCID3112898886  20181   2018         1\n#> 639912: MCID3112898890  20181   2018         1\n#> 639913: MCID3112898894  20181   2018         1\n#> 639914: MCID3112898895  20181   2018         1\n#> 639915: MCID3112898940  20181   2018         1\n\ncheck_equiv_frames(result_df, result_dt)\n#> [1] TRUE\ncheck_equiv_frames(result_dt, result_tbl)\n#> [1] TRUE\n```\n:::\n\n\n[Comments]{.important} \n\n- *base R.* \n\n- *data.table.*  \n\n- *dplyr.* \n\n## Convert column class\n\n[Task.]{.important}  Using the results from the previous example, convert character year to numerical class.\n\n\n::: {.cell class='base'}\n\n```{.r .cell-code}\n# base R\nresult_df$year <- as.double(result_df$year)\n```\n:::\n\n::: {.cell class='dtbl'}\n\n```{.r .cell-code}\n# data.table\nresult_dt[, year := as.double(year)]\n```\n:::\n\n::: {.cell class='dplyr'}\n\n```{.r .cell-code}\n# dplyr\nresult_tbl <- result_tbl %>%\n  mutate(year = as.double(year))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresult_dt\n#>                   mcid   term  year term_code\n#>                 <char> <char> <num>    <char>\n#>      1: MCID3111142225  19881  1988         1\n#>      2: MCID3111142283  19881  1988         1\n#>      3: MCID3111142283  19883  1988         3\n#>      4: MCID3111142283  19885  1988         5\n#>      5: MCID3111142283  19891  1989         1\n#>     ---                                      \n#> 639911: MCID3112898886  20181  2018         1\n#> 639912: MCID3112898890  20181  2018         1\n#> 639913: MCID3112898894  20181  2018         1\n#> 639914: MCID3112898895  20181  2018         1\n#> 639915: MCID3112898940  20181  2018         1\n\ncheck_equiv_frames(result_df, result_dt)\n#> [1] TRUE\ncheck_equiv_frames(result_dt, result_tbl)\n#> [1] TRUE\n```\n:::\n\n\n[Comments]{.important} \n\n- *base R.* \n\n- *data.table.*  \n\n- *dplyr.* \n\n## Recode column values\n\nWhen recoding the values of a column we have a choice: we can recode in place, eliminating the original values entirely, or we can add new column with the new coding. In this first example, we add a column. \n\n\n### Add a column with the recoded values\n\n[Task.]{.important}  Using the results from the previous example, add a column that re-codes the term-codes from numbers to academic terms \"Fall\", \"Winter\", etc. The existing column is `term_code`; the new column is `term_name`. \n\n\n::: {.cell class='base'}\n\n```{.r .cell-code}\n# base R\nresult_df <- within(result_df, {\n\tterm_name <- NA\n\tterm_name[term_code == \"1\"] <- \"Fall\"\n\tterm_name[term_code == \"2\"] <- \"Winter\"\n\tterm_name[term_code == \"3\"] <- \"Spring\"\n\tterm_name[term_code == \"4\"] <- \"Summer 1\"\n\tterm_name[term_code == \"5\"] <- \"Summer 2\"\n\tterm_name[term_code == \"6\"] <- \"Summer 3\"\n})\n```\n:::\n\n::: {.cell class='dtbl'}\n\n```{.r .cell-code}\n# data.table\nresult_dt[, term_name := fcase(\n  term_code == \"1\", \"Fall\",\n  term_code == \"2\", \"Winter\",\n  term_code == \"3\", \"Spring\",\n  term_code == \"4\", \"Summer 1\",\n  term_code == \"5\", \"Summer 2\",\n  term_code == \"6\", \"Summer 3\"\n)]\n```\n:::\n\n::: {.cell class='dplyr'}\n\n```{.r .cell-code}\n# dplyr\nresult_tbl <- result_tbl %>%\n  mutate(term_name = case_match(\n    term_code,\n    \"1\" ~ \"Fall\",\n    \"2\" ~ \"Winter\",\n    \"3\" ~ \"Spring\",\n    \"4\" ~ \"Summer 1\",\n    \"5\" ~ \"Summer 2\",\n    \"6\" ~ \"Summer 3\"\n  ))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresult_dt\n#>                   mcid   term  year term_code term_name\n#>                 <char> <char> <num>    <char>    <char>\n#>      1: MCID3111142225  19881  1988         1      Fall\n#>      2: MCID3111142283  19881  1988         1      Fall\n#>      3: MCID3111142283  19883  1988         3    Spring\n#>      4: MCID3111142283  19885  1988         5  Summer 2\n#>      5: MCID3111142283  19891  1989         1      Fall\n#>     ---                                                \n#> 639911: MCID3112898886  20181  2018         1      Fall\n#> 639912: MCID3112898890  20181  2018         1      Fall\n#> 639913: MCID3112898894  20181  2018         1      Fall\n#> 639914: MCID3112898895  20181  2018         1      Fall\n#> 639915: MCID3112898940  20181  2018         1      Fall\n\ncheck_equiv_frames(result_df, result_dt)\n#> [1] TRUE\ncheck_equiv_frames(result_dt, result_tbl)\n#> [1] TRUE\n```\n:::\n\n\n[Comments]{.important} \n\n- *base R.* `within()` is similar to `with()` but allows us to modify a data frame. We create the new column with `term_name <- NA` then systematically edit its values based on the values in `term_code`. \n\n- *data.table.* `term_name` is created using `:=` then `fcase()` assigns its  values based on logical expressions operating on `term_code`. \n\n- *dplyr.* `term_name` is created using `mutate()` then `case_match()` assigns its values by finding matches to the `term_code` values. \n\n\n\n\n\n### Recode strings in place\n\nHere, we partially recode string values. \n\n[Task.]{.important} In the degree data, shorten the values in the `degree` column by substituting \"BA\" for \"Bachelor of Arts\" and \"BS\" for Bachelor of Science\" to make the printout more readable. \n\nSome of the `degree` values are recorded as \"Bachelor Science\" instead of \"Bachelor of Science\", so to simplify the process the first thing we do is remove all instances of the preposition \"of\". We also select three columns  to make the printout more readable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolumns_we_want <- c(\"mcid\", \"term_degree\", \"degree\")\n```\n:::\n\n::: {.cell class='base'}\n\n```{.r .cell-code}\n# base R\nresult_df <- degree_df[, columns_we_want, drop = FALSE]\nresult_df$degree <- gsub(\" of\", \"\", result_df$degree)\nresult_df$degree <- sub(\"Bachelor Science\", \"BS\", result_df$degree)\nresult_df$degree <- sub(\"Bachelor Arts\", \"BA\", result_df$degree)\nresult_df$degree <- sub(\"Bachelor Fine Arts\", \"BFA\", result_df$degree)\n```\n:::\n\n::: {.cell class='dtbl'}\n\n```{.r .cell-code}\n# data.table\nresult_dt <- degree_dt[, ..columns_we_want]\nresult_dt[, degree := gsub(\" of\", \"\", degree)]\nresult_dt[, degree := sub(\"Bachelor Science\", \"BS\", degree)]\nresult_dt[, degree := str_replace(degree, \"Bachelor Arts\", \"BA\")]\nresult_dt[, degree := str_replace(degree, \"Bachelor Fine Arts\", \"BFA\")]\n```\n:::\n\n::: {.cell class='dplyr'}\n\n```{.r .cell-code}\n# dplyr/stringr\nresult_tbl <- degree_tbl %>%\n select(all_of(columns_we_want)) %>%\n mutate(degree = str_replace_all(degree, \" of\", \"\")) %>% \n mutate(degree = str_replace(degree, \"Bachelor Science\", \"BS\")) %>%\n mutate(degree = str_replace(degree, \"Bachelor Arts\", \"BA\")) %>%\n mutate(degree = str_replace(degree, \"Bachelor Fine Arts\", \"BFA\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresult_dt\n#>                  mcid term_degree                                  degree\n#>                <char>      <char>                                  <char>\n#>     1: MCID3111142225       19881            BS in Electrical Engineering\n#>     2: MCID3111142290       19921            BS in Electrical Engineering\n#>     3: MCID3111142294       19903            BS in Electrical Engineering\n#>     4: MCID3111142299       19921            BS in Electrical Engineering\n#>     5: MCID3111142689       19913                        BA in Journalism\n#>    ---                                                                   \n#> 49661: MCID3112829602       20173  BA in Political Science and Government\n#> 49662: MCID3112831015       20181                         BA in Geography\n#> 49663: MCID3112839623       20181                       BS in Linguistics\n#> 49664: MCID3112845220       20181                       BS in Mathematics\n#> 49665: MCID3112845673       20174 BS in Speech Communication and Rhetoric\n\ncheck_equiv_frames(result_df, result_dt)\n#> [1] TRUE\ncheck_equiv_frames(result_dt, result_tbl)\n#> [1] TRUE\n```\n:::\n\n\n[Comments]{.important} \n\n- *base R.*  `gsub()` replaces all matches in a string; `sub()` replaces the first match only. \n\n- *data.table.* data.table does not have its own string manipulation functions, so here we show two operations using base R and two operations using `stringr`.  \n\n- *dplyr/stringr.* `str_replace_all()` replaces all matches in a string; `str_replace()` replaces the first match only. \n\n\n\n\n\n\n## References \n\n<div id=\"refs\"></div>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}