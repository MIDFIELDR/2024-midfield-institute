{
  "hash": "88dc405efc0623a505f5a0860586636b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Reshaping transforms\"\nformat:\n  html:\n    css: styles.css\n---\n\n\n![Image: *SAREC field day 2018* by Univ Wyoming Extension CT is licensed under [CC BY-NC-ND 2.0](https://creativecommons.org/licenses/by-nc-nd/2.0/)](figures/data-shaping-5.png)\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\nUsing **cdata**, **data.table**, and **tidyr** to transform MIDFIELD data as needed for your analysis (no base R transforms in this section). \n\n- [Introduction](data-shaping-00-introduction.html)\n- [Data selection](data-shaping-01-data-selection.html)\n- [Basic transforms](data-shaping-02-basic-transforms.html)\n- [Aggregating transforms](data-shaping-03-aggregating-transforms.html)\n- [Multi-table transforms](data-shaping-04-multi-table-transforms.html)\n- [Reshaping transforms](data-shaping-05-reshaping-transforms.html)  &#9665; *You are here.*\n\nIn this section, we cover reshaping data frames by moving data between rows and columns, often called *pivoting*. \n\n## Terminology \n\nPivoting operations go by a number of different names, as listed in Table 1 [@Mount+Zumel:2019:fluid-data].   \n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: Table 1: Various names of reshaping operations by system \n\n|System              |Pivot \"wider\"  |Pivot \"longer\" |\n|:-------------------|:--------------|:--------------|\n|colloquially called |\"tall to wide\" |\"wide to tall\" |\n|Microsoft Excel     |pivot          |un-pivot       |\n|databases           |pivot          |anti-pivot     |\n|databases           |crosstab       |shred          |\n|R                   |unstack        |stack          |\n|reshape, reshape2   |cast           |melt           |\n\n\n:::\n:::\n\n\n<br>\n\nPivoting is possible in base R but the package versions in data.table,  tidyr, and cdata are significantly better tools. Table 2 lists the reshaping functions we use in this work. \n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: Table 2: The reshaping operations we use in this  tutorial.\n\n|R package  |Pivot \"wider\"        |Pivot \"longer\"        |\n|:----------|:--------------------|:---------------------|\n|data.table |`dcast()`            |`melt()`              |\n|tidyr      |`pivot_wider()`      |`pivot_longer()`      |\n|cdata      |`pivot_to_rowrecs()` |`unpivot_to_blocks()` |\n\n\n:::\n:::\n\n\n<br>\n\n\n[Defining our terms.]{.important} The data set we use in this section is shown below, where \"starters\" is the number of students starting in an engineering program, \"ever enrolled\" is the number who were enrolled at least one term in the program, and \"graduates\" is the number graduating from that program. \n\nThese data are in \"wide\" format, with one row per program. \n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"font-size: 12px; width: auto !important; \">\n<caption style=\"font-size: initial !important;\">Table 3. Row-records example</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> program </th>\n   <th style=\"text-align:right;\"> starters </th>\n   <th style=\"text-align:right;\"> ever_enrolled </th>\n   <th style=\"text-align:right;\"> graduates </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Civil </td>\n   <td style=\"text-align:right;\"> 983 </td>\n   <td style=\"text-align:right;\"> 1504 </td>\n   <td style=\"text-align:right;\"> 936 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Electrical </td>\n   <td style=\"text-align:right;\"> 1080 </td>\n   <td style=\"text-align:right;\"> 1490 </td>\n   <td style=\"text-align:right;\"> 736 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Industrial </td>\n   <td style=\"text-align:right;\"> 285 </td>\n   <td style=\"text-align:right;\"> 353 </td>\n   <td style=\"text-align:right;\"> 238 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Mechanical </td>\n   <td style=\"text-align:right;\"> 1705 </td>\n   <td style=\"text-align:right;\"> 2306 </td>\n   <td style=\"text-align:right;\"> 1354 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n<br>\n\nTransformed to its \"tall\" format, the dataset has three rows per program. The names of three columns in Table 3 are now values in the peer-group column in Table 4 and all counts of students are collected in the N column.  \n \n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"font-size: 12px; width: auto !important; \">\n<caption style=\"font-size: initial !important;\">Table 4. Block-records example</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> program </th>\n   <th style=\"text-align:left;\"> peer_group </th>\n   <th style=\"text-align:right;\"> N </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Civil </td>\n   <td style=\"text-align:left;\"> ever_enrolled </td>\n   <td style=\"text-align:right;\"> 1504 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Civil </td>\n   <td style=\"text-align:left;\"> starters </td>\n   <td style=\"text-align:right;\"> 983 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Civil </td>\n   <td style=\"text-align:left;\"> graduates </td>\n   <td style=\"text-align:right;\"> 936 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Electrical </td>\n   <td style=\"text-align:left;\"> ever_enrolled </td>\n   <td style=\"text-align:right;\"> 1490 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Electrical </td>\n   <td style=\"text-align:left;\"> starters </td>\n   <td style=\"text-align:right;\"> 1080 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Electrical </td>\n   <td style=\"text-align:left;\"> graduates </td>\n   <td style=\"text-align:right;\"> 736 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Industrial </td>\n   <td style=\"text-align:left;\"> ever_enrolled </td>\n   <td style=\"text-align:right;\"> 353 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Industrial </td>\n   <td style=\"text-align:left;\"> starters </td>\n   <td style=\"text-align:right;\"> 285 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Industrial </td>\n   <td style=\"text-align:left;\"> graduates </td>\n   <td style=\"text-align:right;\"> 238 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Mechanical </td>\n   <td style=\"text-align:left;\"> ever_enrolled </td>\n   <td style=\"text-align:right;\"> 2306 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Mechanical </td>\n   <td style=\"text-align:left;\"> starters </td>\n   <td style=\"text-align:right;\"> 1705 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Mechanical </td>\n   <td style=\"text-align:left;\"> graduates </td>\n   <td style=\"text-align:right;\"> 1354 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n<br>\n \nYou can see why \"wide\" and  \"tall\" are commonly used to describe these two formats.  Yet \"wider\" implies having more columns, and (while true here) that is not always the case. \n\nWhat *is* always true is that the first format comprises ***row records***, or one row per primary key, and the second format comprises ***block records***, or multiple rows per primary key [@Mount+Zumel:2021:block+row+records].\n\nIn our opinion, *block records* and *row records* describe these data formats more memorably than the alternatives, so we use them to define our transforms as well: \n\n- *blocks to row-records* (i.e., pivoting or \"tall to wide\")\n\n- *row-records to blocks* (i.e., un-pivoting or \"wide to tall\")\n\n\n\n\n\n\n## Why transform?\n\nWe transform data between block records and row records to meet specific needs. For example, one of the first things to do when learning a new graphing package in R is to understand the data shape the package requires---some, like [ggplot2](https://CRAN.R-project.org/package=ggplot2), require block records; others, like the [likert](https://CRAN.R-project.org/package=likert) package, require row records if the survey data is in summary form (frequencies counted) but requires block records if not summarized, i.e., one row per respondent, one column per question.\n\nFor row-records, another common application is preparing a data table, as in Table 3. Row records also support analytical tasks. For example, the academic program metric \"stickiness\" is the ratio of the number of graduates from a program to the number ever enrolled in the program. With a data frame `df` organized like the Table 3 data, computing stickiness requires one line of code operating on values in the same row, e.g., \n\n```r\n# base R\ndf$stickiness <- df$graduates / df$ever_enrolled\n```\n\nBlock records, on the other hand, are convenient for grouping and summarizing operations and, as stated earlier, required for making charts with ggplot2. For example, with a data frame `blocks` organized like the Table 4 data, we can graph *N* as a function of program and peer group. The three column names of the block-record formatted data are arguments in the `aes()` function and then appear on the horizontal scale (N), the vertical scale (programs), and the legend (peer groups). \n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot(blocks, aes(x = N, \n                   y = program, \n                   color = peer_group, \n                   shape = peer_group)) +\n  geom_point(size = 3) +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](data-shaping-05-reshaping-transforms_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n## Data \n\n[Load packages and format data]{.important} as described in the  [Introduction](data-shaping-00-introduction.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"data.table\")\nlibrary(\"dplyr\", warn.conflicts = FALSE)\nlibrary(\"tidyr\")\nlibrary(\"cdata\")\n\ncohort <- fread(\"data/three_blocs.csv\")\n```\n:::\n\n::: {.cell class='base'}\n\n```{.r .cell-code}\n# base R\ncohort_df <- data.frame(cohort)\n```\n:::\n\n::: {.cell class='dtbl'}\n\n```{.r .cell-code}\n# data.table\ncohort_dt <- copy(cohort)\n```\n:::\n\n::: {.cell class='dplyr'}\n\n```{.r .cell-code}\n# dplyr\ncohort_tbl <- tibble(cohort)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncohort_dt\n#>                  mcid    program peer_group\n#>                <char>     <char>     <char>\n#>     1: MCID3111142965 Electrical   starters\n#>     2: MCID3111145102 Electrical   starters\n#>     3: MCID3111150194 Industrial   starters\n#>     4: MCID3111156083 Electrical   starters\n#>     5: MCID3111156325 Electrical   starters\n#>    ---                                     \n#> 12966: MCID3112618553 Mechanical  graduates\n#> 12967: MCID3112618574 Mechanical  graduates\n#> 12968: MCID3112618976 Mechanical  graduates\n#> 12969: MCID3112619484 Electrical  graduates\n#> 12970: MCID3112641535 Mechanical  graduates\n```\n:::\n\n\n<br>\n\n[Count]{.important} by program and peer group as described in [Aggregating transforms](data-shaping-03-aggregating-transforms.html#counting). The result is in block-records format. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nkey_columns <- c(\"program\", \"peer_group\") \n```\n:::\n\n::: {.cell class='base'}\n\n```{.r .cell-code}\n# base R\nfreq_table <- table(cohort_df$program,\n                    cohort_df$peer_group,\n                    dnn = key_columns)\nblocks_df <- as.data.frame(freq_table, \n                         responseName = \"N\",\n                         stringsAsFactors = FALSE)\n```\n:::\n\n::: {.cell class='dtbl'}\n\n```{.r .cell-code}\n# data.table\nblocks_dt <- cohort_dt[, .N, by = key_columns]\nsetorder(blocks_dt, program, -N)\n```\n:::\n\n::: {.cell class='dplyr'}\n\n```{.r .cell-code}\n# dplyr\nblocks_tbl <- cohort_tbl %>%\n count(program, peer_group, name = \"N\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nblocks_dt\n#>        program    peer_group     N\n#>         <char>        <char> <int>\n#>  1:      Civil ever_enrolled  1504\n#>  2:      Civil      starters   983\n#>  3:      Civil     graduates   936\n#>  4: Electrical ever_enrolled  1490\n#>  5: Electrical      starters  1080\n#>  6: Electrical     graduates   736\n#>  7: Industrial ever_enrolled   353\n#>  8: Industrial      starters   285\n#>  9: Industrial     graduates   238\n#> 10: Mechanical ever_enrolled  2306\n#> 11: Mechanical      starters  1705\n#> 12: Mechanical     graduates  1354\n\ncheck_equiv_frames(blocks_df, blocks_dt)\n#> [1] TRUE\ncheck_equiv_frames(blocks_dt, blocks_tbl)\n#> [1] TRUE\n```\n:::\n\n\n\n\n## Blocks to row-records\n\nIn this transform, we group a set of rows that go together (matching on keys) and combine them into one row by adding columns. The result is in *row-records* form, with one row per program. \n\n\n::: {.cell class='dtbl'}\n\n```{.r .cell-code}\n# data.table\nrowrecs_dt <- dcast(blocks_dt, \n                    program ~ peer_group, \n                    value.var = \"N\")\n                    setkey(rowrecs_dt, NULL)\n```\n:::\n\n::: {.cell class='dplyr'}\n\n```{.r .cell-code}\n# tidyr\nrowrecs_tbl <- blocks_tbl %>%\n  pivot_wider(id_cols = program, \n              names_from = peer_group, \n              values_from = N)\n```\n:::\n\n::: {.cell class='other'}\n\n```{.r .cell-code}\n# cdata\nrowrecs_df <- pivot_to_rowrecs(blocks_df,  \n                               rowKeyColumns = \"program\", \n                               columnToTakeKeysFrom = \"peer_group\",\n                               columnToTakeValuesFrom = \"N\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrowrecs_dt\n#>       program ever_enrolled graduates starters\n#>        <char>         <int>     <int>    <int>\n#> 1:      Civil          1504       936      983\n#> 2: Electrical          1490       736     1080\n#> 3: Industrial           353       238      285\n#> 4: Mechanical          2306      1354     1705\n\ncheck_equiv_frames(rowrecs_df, rowrecs_dt)\n#> [1] TRUE\ncheck_equiv_frames(rowrecs_dt, rowrecs_tbl)\n#> [1] TRUE\n```\n:::\n\n\n[Comments]{.important} \n\n- In all cases, the same transformation occurs: column `program` remains a *row key* column; the values of the `peer_group` column (`ever_enrolled`, `graduates`, `starters`) become new key column *names* with *values* taken from the `N` column. \n\n- *data.table.* `dcast()` uses a formula `LHS ~ RHS`\n\n- *tidyr* `pivot_wider()`, an updated approach to `spread()`. \n\n- *cdata.* `pivot_to_rowrecs()`, a special case of the more general function `blocks_to_rowrecs()`.\n\n\n\n\n\n## Row-records to blocks\n\nIn this transform---the inverse of  blocks to row-records---each row is disassembled and used to make a block of many rows. Each block of records in the new data frame has as many rows per record as there are columns we take measurements from. \n\n\n::: {.cell class='dtbl'}\n\n```{.r .cell-code}\n# data.table\nblocks_dt <- melt(\n  rowrecs_dt, \n  measure.vars = c(\"ever_enrolled\", \"graduates\", \"starters\"), \n  variable.name = \"peer_group\", \n  value.name = \"N\", \n  variable.factor = FALSE\n)\nsetorderv(blocks_dt, c(\"program\", \"peer_group\"))\n```\n:::\n\n::: {.cell class='dplyr'}\n\n```{.r .cell-code}\n# tidyr\nblocks_tbl <- rowrecs_tbl %>%\n  pivot_longer(\n  cols = c(\"ever_enrolled\", \"graduates\", \"starters\"),\n  names_to = \"peer_group\", \n  values_to = \"N\"\n)\n```\n:::\n\n::: {.cell class='other'}\n\n```{.r .cell-code}\n# cdata\nblocks_df <- unpivot_to_blocks(\n  rowrecs_df, \n  columnsToTakeFrom = c(\"ever_enrolled\", \"graduates\", \"starters\"),\n  nameForNewKeyColumn = \"peer_group\", \n  nameForNewValueColumn = \"N\"\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nblocks_dt\n#>        program    peer_group     N\n#>         <char>        <char> <int>\n#>  1:      Civil ever_enrolled  1504\n#>  2:      Civil     graduates   936\n#>  3:      Civil      starters   983\n#>  4: Electrical ever_enrolled  1490\n#>  5: Electrical     graduates   736\n#>  6: Electrical      starters  1080\n#>  7: Industrial ever_enrolled   353\n#>  8: Industrial     graduates   238\n#>  9: Industrial      starters   285\n#> 10: Mechanical ever_enrolled  2306\n#> 11: Mechanical     graduates  1354\n#> 12: Mechanical      starters  1705\n\ncheck_equiv_frames(blocks_df, blocks_dt)\n#> [1] TRUE\ncheck_equiv_frames(blocks_dt, blocks_tbl)\n#> [1] TRUE\n```\n:::\n\n\n[Comments]{.important} \n\n- In all cases, the same transformation occurs: column names are identified (`ever_enrolled`, `graduates`, `starters`) and collected in a new key column (`peer_group`); the values from these columns are collected in a new payload column (`N`); and column names not selected (`program`) are treated as keys, copied to each record row in the result.\n\n- *data.table* `melt()`\n\n- *tidyr* `pivot_longer()`, an updated approach to `gather()`\n\n- *cdata* `unpivot_to_blocks()` a special case of the more general function `rowrecs_to_blocks()`. \n\n\n\n\n## Next steps\n\nReshaping transforms can also be applied to more than one column, though we don't cover that use case here. For those interested:  \n\n- data.table's `dcast()` allows more complicated transforms, such as casting to multiple variables and aggregations at the same time.\n\n- cdata has simple methods for conversions of many columns at once using `blocks_to_rowrecs()` and `rowrecs_to_blocs()` plus a \"control table\".  See, for example, [Faceted graphs with cdata and ggplot2](https://win-vector.com/2018/10/21/faceted-graphs-with-cdata-and-ggplot2/)\n\n- tidyr has similar functions, inspired by cdata, using `pivot_longer_spec()` and `pivot_wider_spec()`. See [Pivot data from long to wide using a spec](https://tidyr.tidyverse.org/reference/pivot_wider_spec.html). \n\n\n\n\n\n\n\n\n\n## References \n\n<div id=\"refs\"></div>\n\n",
    "supporting": [
      "data-shaping-05-reshaping-transforms_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}