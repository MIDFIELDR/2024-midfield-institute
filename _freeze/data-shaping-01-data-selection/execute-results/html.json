{
  "hash": "a3657c44665ec9258edb2d8baec13f06",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data selection\"\nformat:\n  html:\n    css: styles.css\n---\n\n\n![Image: *Select* by Mike Lawrence is licensed under [CC BY 2.0](https://creativecommons.org/licenses/by/2.0/)](figures/data-shaping-1.png)\n\n\n\n\n\nUsing **base R**, **data.table**, and **dplyr** to transform MIDFIELD data as needed for your analysis.\n\n- [Introduction](data-shaping-00-introduction.html)\n- [Data selection](data-shaping-01-data-selection.html)  &#9665; *You are here.*\n- [Basic transforms](data-shaping-02-basic-transforms.html)\n- [Aggregating transforms](data-shaping-03-aggregating-transforms.html)\n- [Multitable transforms](data-shaping-04-multitable-transforms.html)\n- [Reshaping transforms](data-shaping-05-reshaping-transforms.html)\n\nIn this section we demonstrate subsetting rows and columns in various configurations, removing records with incomplete data, and reordering rows. \n\n## Getting started\n\nPackages and datasets, as shown in the  [Introduction](data-shaping-00-introduction.html) to data shaping.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(midfielddata) # datasets\nlibrary(data.table) # data manipulation system\nlibrary(dplyr) # data manipulation system\nlibrary(tidyr) # drop_na()\n\ndata(student, term)\n\nstudent_base <- data.frame(student)\nstudent_DT <- copy(student)\nstudent_dplyr <- tibble(student)\n\nterm_base <- data.frame(term)\nterm_DT <- copy(term)\nterm_dplyr <- tibble(term)\n```\n:::\n\n\n## Subsetting rows and columns\n\nA common task when working with data is selecting a subset of rows,  columns, or both. \n\n\n\n\n### Indirect indexing\n\nUsing intermediate variables that refer to the values used to subset rows and columns.  We often construct intermediate variables `columns_we_want` and `rows_we_want` as indices for column and row subsetting to be used in more than one system example. The extra clarity is often worth the extra lines of code.  \n\n*Task.* &nbsp; Prepare data to summarize domestic students by race, sex, and institution.\n\nOur first step might be to subset columns (institution, race, sex, and us_citizen) and subset rows such that US citizenship is true. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# character vector of column names\ncolumns_we_want <- c(\"institution\", \"race\", \"sex\", \"us_citizen\")\n```\n:::\n\n::: {.cell class='base'}\n\n```{.r .cell-code}\n# base R\nrows_we_want <- student_base$us_citizen == \"Yes\"\nresult_base <- student_base[rows_we_want, columns_we_want, drop = FALSE]\n```\n:::\n\n::: {.cell class='dtbl'}\n\n```{.r .cell-code}\n# data.table\nrows_we_want <- student_DT$us_citizen == \"Yes\"\nresult_DT <- student_DT[rows_we_want, ..columns_we_want]\n```\n:::\n\n::: {.cell class='dplyr'}\n\n```{.r .cell-code}\n# dplyr\nrows_we_want <- student_dplyr$us_citizen == \"Yes\"\nresult_dplyr <- student_dplyr %>%\n  select(all_of(columns_we_want)) %>%\n  filter(rows_we_want)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresult_DT\n#>          institution          race    sex us_citizen\n#>               <char>        <char> <char>     <char>\n#>     1: Institution B         Asian   Male        Yes\n#>     2: Institution J         Asian Female        Yes\n#>     3: Institution J         Asian   Male        Yes\n#>     4: Institution J         Asian   Male        Yes\n#>     5: Institution J         Asian   Male        Yes\n#>    ---                                              \n#> 90387: Institution B         White Female        Yes\n#> 90388: Institution B         White Female        Yes\n#> 90389: Institution B         White Female        Yes\n#> 90390: Institution B         White Female        Yes\n#> 90391: Institution B Other/Unknown   Male        Yes\n\nall.equal(result_DT, data.table(result_base))\n#> [1] TRUE\nall.equal(result_DT, data.table(result_dplyr))\n#> [1] TRUE\n```\n:::\n\n\n\n*Comments*\n\n- *base R.* Base R's default behavior when selecting a single column is to return a vector. Thus, when working with `[,]` always add a third argument `drop = FALSE` to ensure a data frame is returned. \n\n- *data.table.* The `..` notation indicates that `columns_we_want` refers to a character vector of column names and is not itself a column name. \n\n- *dplyr.* The added notation `all_of()` in effect serves the same purpose in dplyr as `..` does in data.table. \n\n### Direct indexing\n\nColumn and row selection that is typed directly into the subsetting operators `[,]` or `filter()` and `select()` without using intermediate variables. \n\n*Task.* &nbsp; Same as previous example. \n\n\n::: {.cell class='base'}\n\n```{.r .cell-code}\n# base R\nresult_base <- student_base[student_base$us_citizen == \"Yes\",\n  c(\"institution\", \"race\", \"sex\", \"us_citizen\"),\n  drop = FALSE\n]\n```\n:::\n\n::: {.cell class='dtbl'}\n\n```{.r .cell-code}\n# data.table\nresult_DT <- student_DT[us_citizen == \"Yes\", .(institution, race, sex, us_citizen)]\n```\n:::\n\n::: {.cell class='dplyr'}\n\n```{.r .cell-code}\n# dplyr\nresult_dplyr <- student_dplyr %>%\n  select(institution, race, sex, us_citizen) %>%\n  filter(us_citizen == \"Yes\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresult_DT\n#>          institution          race    sex us_citizen\n#>               <char>        <char> <char>     <char>\n#>     1: Institution B         Asian   Male        Yes\n#>     2: Institution J         Asian Female        Yes\n#>     3: Institution J         Asian   Male        Yes\n#>     4: Institution J         Asian   Male        Yes\n#>     5: Institution J         Asian   Male        Yes\n#>    ---                                              \n#> 90387: Institution B         White Female        Yes\n#> 90388: Institution B         White Female        Yes\n#> 90389: Institution B         White Female        Yes\n#> 90390: Institution B         White Female        Yes\n#> 90391: Institution B Other/Unknown   Male        Yes\n\nall.equal(result_DT, data.table(result_base))\n#> [1] TRUE\nall.equal(result_DT, data.table(result_dplyr))\n#> [1] TRUE\n```\n:::\n\n\n*Comments*\n\n- *base R.* For direct indexing, intermediate variable names in `[,]` are replaced verbatim by their values. \n\n- *data.table.* The notation `.()` subsets columns by name without quotation marks;  rows are subset without the `$` operator.\n\n- *dplyr.* Similarly, `select()` operates on unquoted column names; rows are subset without the `$` operator. \n\n### Subset rows with multiple conditions\n\nMultiple logical conditions are combined with operators such as & (and), | (or), ! (not), etc.  \n\n*Task.* &nbsp; Find IDs of transfer students with 15 or more credit hours transferred.   \n\nWhen a variable is overwritten multiple times to get to a result, we will sometimes employ the variable `DF` as an intermediate variable. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolumns_we_want <- c(\"mcid\", \"transfer\", \"hours_transfer\")\n```\n:::\n\n::: {.cell class='base'}\n\n```{.r .cell-code}\n# base R\nrows_we_want <- student_base$transfer == \"First-Time Transfer\" & student_base$hours_transfer >= 15\nDF <- student_base[rows_we_want, columns_we_want, drop = FALSE]\n\n# remove rows with NA in every column\nrows_we_want <- rowSums(is.na(DF)) < ncol(DF)\nresult_base <- DF[rows_we_want, , drop = FALSE]\n```\n:::\n\n::: {.cell class='dtbl'}\n\n```{.r .cell-code}\n# data.table\nresult_DT <- student_DT[transfer == \"First-Time Transfer\" & hours_transfer >= 15, ..columns_we_want]\n```\n:::\n\n::: {.cell class='dplyr'}\n\n```{.r .cell-code}\n# dplyr\nresult_dplyr <- student_dplyr %>%\n  select(mcid, transfer, hours_transfer) %>%\n  filter(transfer == \"First-Time Transfer\" & hours_transfer >= 15)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresult_DT\n#>                 mcid            transfer hours_transfer\n#>               <char>              <char>          <num>\n#>    1: MCID3111142840 First-Time Transfer             44\n#>    2: MCID3111142895 First-Time Transfer             16\n#>    3: MCID3111142910 First-Time Transfer             41\n#>    4: MCID3111142914 First-Time Transfer            156\n#>    5: MCID3111142983 First-Time Transfer             24\n#>   ---                                                  \n#> 9458: MCID3112898091 First-Time Transfer            110\n#> 9459: MCID3112898410 First-Time Transfer             71\n#> 9460: MCID3112898411 First-Time Transfer             68\n#> 9461: MCID3112898412 First-Time Transfer             30\n#> 9462: MCID3112898801 First-Time Transfer            218\n\nall.equal(result_DT, data.table(result_base))\n#> [1] TRUE\nall.equal(result_DT, data.table(result_dplyr))\n#> [1] TRUE\n```\n:::\n\n\n*Comments*\n\n- *base R.* Two steps required. Subset rows by the original logical conditions; then subset to remove rows with NA across all columns. `rowSums()` assigns 1 to TRUE and 0 to FALSE. If the number of NAs in a row is less than the number of columns, then that row contains non-NA data and we keep it.\n\n- *data.table.* Multiple conditions separated by logical AND `&`. Does not generate all-NA rows as in base R.  \n\n- *dplyr.* Similar. \n\n### Subset one column as a vector\n\n*Task.* &nbsp; Obtain a vector of unique IDs in the `term` dataset.\n\n\n::: {.cell class='base'}\n\n```{.r .cell-code}\n# base R\nvec <- term_base[, \"mcid\"]\nresult_base <- unique(vec)\n```\n:::\n\n::: {.cell class='dtbl'}\n\n```{.r .cell-code}\n# data.table\nvec <- term_DT[, mcid]\nresult_DT <- unique(vec)\n```\n:::\n\n::: {.cell class='dplyr'}\n\n```{.r .cell-code}\n# dplyr\nresult_dplyr <- term_dplyr %>%\n  pull(.data$mcid) %>%\n  unique()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(result_DT)\n#>  chr [1:97555] \"MCID3111142225\" \"MCID3111142283\" \"MCID3111142290\" ...\n\nall.equal(result_DT, result_base)\n#> [1] TRUE\nall.equal(result_DT, result_dplyr)\n#> [1] TRUE\n```\n:::\n\n\n*Comments*\n\n- *base R.* For clarity, we deliberately write these steps in two lines of code. One could just as easily write the single line `result_base <- unique(term_base[, \"mcid\"])`.\n\n- *data.table.* \n\n- *dplyr.* The conventional syntax would be `pull(mcid)` except for a subtle flaw in the current version of `pull()`. For details, see [@Layton:2024]. The dplyr function `distinct()` isn't used here because it applies to data frames, not vectors. \n\n## Removing records with incomplete data\n\nAn important variation of subsetting data is removing rows of data that have missing values. If appropriate, limit the dropped rows to those with missing values in specific columns. \n\n*Task.* &nbsp; We are asked to compare SAT scores by institution. Before doing any analysis, we first remove rows with missing SAT scores. \n\n\n\n\n### Using complete.cases\n\nWe select three columns, then obtain a logical vector with one entry per row of the data frame: TRUE if a row has no missing entries, FALSE otherwise. \n\n\n::: {.cell class='base'}\n\n```{.r .cell-code}\n# base R\nDF <- student_base[, c(\"institution\", \"sat_math\", \"sat_verbal\"), drop = FALSE]\nresult_base <- DF[complete.cases(DF), , drop = FALSE]\n```\n:::\n\n::: {.cell class='dtbl'}\n\n```{.r .cell-code}\n# data.table\nDT <- student_DT[, .(institution, sat_math, sat_verbal)]\nresult_DT <- DT[complete.cases(DT), ]\n```\n:::\n\n::: {.cell class='dplyr'}\n\n```{.r .cell-code}\n# dplyr\nresult_dplyr <- student_dplyr %>%\n  select(institution, sat_math, sat_verbal) %>%\n  filter(complete.cases(.))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresult_DT\n#>          institution sat_math sat_verbal\n#>               <char>    <num>      <num>\n#>     1: Institution J      560        230\n#>     2: Institution J      510        380\n#>     3: Institution J      640        460\n#>     4: Institution J      600        500\n#>     5: Institution J      570        530\n#>    ---                                  \n#> 77096: Institution B      530        560\n#> 77097: Institution B      570        580\n#> 77098: Institution B      510        590\n#> 77099: Institution B      420        590\n#> 77100: Institution B      470        540\n\nall.equal(result_DT, data.table(result_base))\n#> [1] TRUE\nall.equal(result_DT, data.table(result_dplyr))\n#> [1] TRUE\n```\n:::\n\n\n*Comments*\n\n- *base R.* Where before we used the name `columns_we_want` to reference a character vector of column names, here we use the character vector itself. \n\n- *data.table.* \n\n- *dplyr.* In magrittr pipe notation a dot `.` is taken to mean the item being piped. Here for example, the output of `select()` is piped to `filter()` then to `complete.cases(.)` --- the latter requiring the dot.  \n\n### Using na.omit or equivalent\n\nWe can perform the same task without explicit Boolean row-selection in any of the systems. \n\n\n::: {.cell class='base'}\n\n```{.r .cell-code}\n# base R\nDF <- student_base[, c(\"institution\", \"sat_math\", \"sat_verbal\"), drop = FALSE]\nresult_base <- na.omit(DF)\n```\n:::\n\n::: {.cell class='dtbl'}\n\n```{.r .cell-code}\n# data.table\nDT <- student_DT[, .(institution, sat_math, sat_verbal)]\nresult_DT <- na.omit(DT)\n```\n:::\n\n::: {.cell class='dplyr'}\n\n```{.r .cell-code}\n# dplyr\nresult_dplyr <- student_dplyr %>%\n  select(institution, sat_math, sat_verbal) %>%\n  drop_na()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresult_DT\n#>          institution sat_math sat_verbal\n#>               <char>    <num>      <num>\n#>     1: Institution J      560        230\n#>     2: Institution J      510        380\n#>     3: Institution J      640        460\n#>     4: Institution J      600        500\n#>     5: Institution J      570        530\n#>    ---                                  \n#> 77096: Institution B      530        560\n#> 77097: Institution B      570        580\n#> 77098: Institution B      510        590\n#> 77099: Institution B      420        590\n#> 77100: Institution B      470        540\n\nall.equal(result_DT, data.table(result_base))\n#> [1] TRUE\nall.equal(result_DT, data.table(result_dplyr))\n#> [1] TRUE\n```\n:::\n\n\n*Comments*\n\n- *base R.* \n\n- *data.table.*  \n\n- *dplyr.* `drop_na()` is from the tidyr package. \n\n### Incomplete rows in specified columns\n\nDelete rows with missing values in specified columns but retain all columns. Note that the number of rows matches the number in the previous example.  \n\n\n::: {.cell class='base'}\n\n```{.r .cell-code}\n# base R\nrows_we_want <- !(is.na(student_base$institution) |\n  is.na(student_base$sat_math) |\n  is.na(student_base$sat_verbal))\nresult_base <- student_base[rows_we_want, , drop = FALSE]\n```\n:::\n\n::: {.cell class='dtbl'}\n\n```{.r .cell-code}\n# data.table\nresult_DT <- na.omit(student_DT, cols = c(\"institution\", \"sat_math\", \"sat_verbal\"))\n```\n:::\n\n::: {.cell class='dplyr'}\n\n```{.r .cell-code}\n# dplyr\nresult_dplyr <- student_dplyr %>%\n  drop_na(institution, sat_math, sat_verbal)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresult_DT\n#>                  mcid   institution              transfer hours_transfer\n#>                <char>        <char>                <char>          <num>\n#>     1: MCID3111142283 Institution J   First-Time Transfer             NA\n#>     2: MCID3111142290 Institution J   First-Time Transfer             NA\n#>     3: MCID3111142294 Institution J   First-Time Transfer             NA\n#>     4: MCID3111142299 Institution J   First-Time Transfer             NA\n#>     5: MCID3111142303 Institution J   First-Time Transfer             NA\n#>    ---                                                                  \n#> 77096: MCID3112898886 Institution B First-Time in College             NA\n#> 77097: MCID3112898890 Institution B First-Time in College             NA\n#> 77098: MCID3112898894 Institution B First-Time in College             NA\n#> 77099: MCID3112898895 Institution B First-Time in College             NA\n#> 77100: MCID3112898940 Institution B First-Time in College             NA\n#>                 race    sex age_desc us_citizen home_zip high_school sat_math\n#>               <char> <char>   <char>     <char>   <char>      <char>    <num>\n#>     1:         Asian Female Under 25        Yes    22020        <NA>      560\n#>     2:         Asian   Male Under 25        Yes    23233      471872      510\n#>     3:         Asian   Male Under 25        Yes    20853        <NA>      640\n#>     4:         Asian   Male Under 25        Yes    22003      470080      600\n#>     5:         Asian   Male Under 25        Yes    23234      471877      570\n#>    ---                                                                       \n#> 77096:         White Female Under 25        Yes    53711      501165      530\n#> 77097:         White Female Under 25        Yes    54956      501275      570\n#> 77098:         White Female Under 25        Yes    53716      501160      510\n#> 77099:         White Female Under 25        Yes    53029      500853      420\n#> 77100: Other/Unknown   Male Under 25        Yes    20016      090073      470\n#>        sat_verbal act_comp\n#>             <num>    <num>\n#>     1:        230       NA\n#>     2:        380       NA\n#>     3:        460       NA\n#>     4:        500       NA\n#>     5:        530       NA\n#>    ---                    \n#> 77096:        560       29\n#> 77097:        580       25\n#> 77098:        590       24\n#> 77099:        590       32\n#> 77100:        540       32\n\nall.equal(result_DT, data.table(result_base))\n#> [1] TRUE\nall.equal(result_DT, data.table(result_dplyr))\n#> [1] TRUE\n```\n:::\n\n\n*Comments*\n\n- *base R.* Using logical operators `!` NOT and `|` OR to create a logical vector used as a row index. \n\n- *data.table.* The same function name `na.omit()` as base R but with an argument to drops rows with missing values in specified columns. Retains all columns. \n\n- *dplyr.* Similarly, `drop_na()` drops rows with missing values in  specified columns, retaining all columns. \n\n## Ordering rows\n\nIn some instances, it is important for us to control the order of rows in our data. \n\n### Ascending \n\nIn all three systems, the default sort order is increasing (ascending) from row 1 to row N. \n\n*Task.* &nbsp; Suppose we want to know a student's level and declared major in their first term at their institution. We use the `term` dataset.  \n\nWe decide to order the rows first by institution, then by ID, then by term. In each case, we select columns in a separate operation so we can highlight the row-ordering operation.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolumns_we_want <- c(\"institution\", \"mcid\", \"term\", \"level\", \"cip6\")\n```\n:::\n\n::: {.cell class='base'}\n\n```{.r .cell-code}\n# base R\nDF <- term_base[, columns_we_want, drop = FALSE]\norder_index <- with(DF, order(institution, mcid, term))\nresult_base <- DF[order_index, , drop = FALSE]\n```\n:::\n\n::: {.cell class='dtbl'}\n\n```{.r .cell-code}\n# data.table\nresult_DT <- term_DT[, ..columns_we_want]\norder_cols <- c(\"institution\", \"mcid\", \"term\")\nsetorderv(result_DT, order_cols)\n```\n:::\n\n::: {.cell class='dplyr'}\n\n```{.r .cell-code}\n# dplyr\nresult_dplyr <- term_dplyr %>%\n  select(institution, mcid, term, level, cip6) %>%\n  arrange(institution, mcid, term)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresult_DT\n#>           institution           mcid   term         level   cip6\n#>                <char>         <char> <char>        <char> <char>\n#>      1: Institution B MCID3111142225  19881 01 First-year 140901\n#>      2: Institution B MCID3111142689  19883 01 First-year 090401\n#>      3: Institution B MCID3111142729  19881 01 First-year 141901\n#>      4: Institution B MCID3111142729  19883 01 First-year 141901\n#>      5: Institution B MCID3111142819  19881 01 First-year 230101\n#>     ---                                                         \n#> 639911: Institution J MCID3112447745  20096 01 First-year 040201\n#> 639912: Institution J MCID3112447746  20096 01 First-year 190501\n#> 639913: Institution J MCID3112447751  20096 01 First-year 240102\n#> 639914: Institution J MCID3112447753  20096 01 First-year 520201\n#> 639915: Institution J MCID3112447754  20096 01 First-year 240102\n\nall.equal(result_DT, data.table(result_base))\n#> [1] TRUE\nall.equal(result_DT, data.table(result_dplyr))\n#> [1] TRUE\n```\n:::\n\n\n*Comments*\n\n- *base R.* Using `with()`, we can list the variables to order by without using the `$` operator. \n\n- *data.table.* `setorderv()` reorders data in place---hence no assignment operator `<-` is required---and it operates on a character vector of column names.  \n\n- *dplyr.* `arrange()` orders the rows of a data frame by the values of selected columns. \n\n\n\n\n\n### Descending\n\nWhen we want a decreasing (descending) row order, it is typically  needed for some but not all of our columns. \n\nSuppose we wanted to sort students by institution and descending transfer hours. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolumns_we_want <- c(\"institution\", \"mcid\", \"hours_transfer\")\n```\n:::\n\n::: {.cell class='base'}\n\n```{.r .cell-code}\n# base R\nDF <- student_base[, columns_we_want, drop = FALSE]\nDF <- na.omit(DF)\norder_index <- with(DF, order(institution, -hours_transfer, mcid))\nresult_base <- DF[order_index, , drop = FALSE]\n```\n:::\n\n::: {.cell class='dtbl'}\n\n```{.r .cell-code}\n# data.table\nDT <- student_DT[, ..columns_we_want]\nresult_DT <- na.omit(DT)\norder_cols <- c(\"institution\", \"hours_transfer\", \"mcid\")\nsetorderv(result_DT, order_cols, order = c(1, -1, 1))\n```\n:::\n\n::: {.cell class='dplyr'}\n\n```{.r .cell-code}\n# dplyr\nresult_dplyr <- student_dplyr %>%\n  select(institution, mcid, hours_transfer) %>%\n  drop_na() %>%\n  arrange(institution, desc(hours_transfer), mcid)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresult_DT\n#>          institution           mcid hours_transfer\n#>               <char>         <char>          <num>\n#>     1: Institution B MCID3112694097            278\n#>     2: Institution B MCID3112788655            271\n#>     3: Institution B MCID3112693474            238\n#>     4: Institution B MCID3112500991            229\n#>     5: Institution B MCID3112879516            228\n#>    ---                                            \n#> 13925: Institution C MCID3112785098              1\n#> 13926: Institution C MCID3112785144              1\n#> 13927: Institution C MCID3112785478              1\n#> 13928: Institution C MCID3112785480              1\n#> 13929: Institution C MCID3112785484              1\n\nall.equal(result_DT, data.table(result_base))\n#> [1] TRUE\nall.equal(result_DT, data.table(result_dplyr))\n#> [1] TRUE\n```\n:::\n\n\n*Comments*\n\n- *base R.* Base R does not provide a general way to sort individual variables in descending order, but a minus sign works with numerical variables. The `decreasing` argument, if used, applies to all variables. \n\n- *data.table.* In `setorderv()`, add the `order` argument with `1` for ascending and `-1` for descending. \n\n- *dplyr.* In `arrange()` apply `desc()` to the descending variable. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## References \n\n<div id=\"refs\"></div>\n\n",
    "supporting": [
      "data-shaping-01-data-selection_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}